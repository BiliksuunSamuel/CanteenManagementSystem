<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapplo.Windows.User32</name>
    </assembly>
    <members>
        <member name="T:Dapplo.Windows.User32.DisplayInfo">
            <summary>
                The DisplayInfo class is like the Screen class, only not cached.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.MonitorHandle">
            <summary>
                Desktop working area
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.Index">
            <summary>
            Index of the Display, as specified in the "control panel".
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.Bounds">
            <summary>
                Screen bounds
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.DeviceName">
            <summary>
                Device name
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.IsPrimary">
            <summary>
                Is this the primary monitor
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.ScreenHeight">
            <summary>
                Height of  the screen
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.ScreenWidth">
            <summary>
                Width of the screen
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.WorkingArea">
            <summary>
                Desktop working area
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.ScreenBounds">
            <summary>
            Get the bounds of the complete screen
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.DisplayInfo.AllDisplayInfos">
            <summary>
                Return all DisplayInfo
            </summary>
            <returns>array of DisplayInfo</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.DisplayInfo.GetBounds(Dapplo.Windows.Common.Structs.NativePoint)">
            <summary>
                Implementation like <a href="https://msdn.microsoft.com/en-us/library/6d7ws9s4(v=vs.110).aspx">Screen.GetBounds</a>
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ClassLongIndex">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633580(v=vs.85).aspx">GetClassLong function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.Atom">
            <summary>
                Retrieves an ATOM value that uniquely identifies the window class.
                This is the same atom that the RegisterClassEx function returns.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.ClassExtraBytes">
            <summary>
                the size, in bytes, of the extra memory associated with the class.
                Setting this value does not change the number of extra bytes already allocated.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.WindowExtraBytes">
            <summary>
                the size, in bytes, of the extra window memory associated with each window in the class.
                Setting this value does not change the number of extra bytes already allocated.
                For information on how to access this memory, see SetWindowLong.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.BackgroundBrushHandle">
            <summary>
                a handle to the background brush associated with the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.CursorHandle">
            <summary>
                a handle to the cursor associated with the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.IconHandle">
            <summary>
                GCL_HICON a handle to the icon associated with the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.SmallIconHandle">
            <summary>
                GCL_HICONSM a handle to the small icon associated with the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.ModuleHandle">
            <summary>
                a handle to the module that registered the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.MenuName">
            <summary>
                the address of the menu name string. The string identifies the menu resource associated with the class.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.Style">
            <summary>
                the window-class style bits.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ClassLongIndex.WindowProc">
            <summary>
                the address of the window procedure, or a handle representing the address of the window procedure.
                You must use the CallWindowProc function to call the window procedure.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.CursorInfoFlags">
            <summary>
                Flags for the CURSOR_INFO "flags" field, see:
                https://msdn.microsoft.com/en-us/library/windows/desktop/ms648381.aspx
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.CursorInfoFlags.Hidden">
            <summary>
                Cursor is hidden
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.CursorInfoFlags.Showing">
            <summary>
                Cursor is showing
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.CursorInfoFlags.Suppressed">
            <summary>
                Cursor is suppressed
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.DesktopAccessRight">
            <summary>
                Used to open a desktop
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff700543.aspx">Extended Window Styles</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_NONE">
            <summary>
                Default style, with nothing
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_DLGMODALFRAME">
            <summary>
                The window has a double border;
                the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle
                parameter.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_NOPARENTNOTIFY">
            <summary>
                The child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is
                created or destroyed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_TOPMOST">
            <summary>
                The window should be placed above all non-topmost windows and should stay above them, even when the window is
                deactivated.
                To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_ACCEPTFILES">
            <summary>
                The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_TRANSPARENT">
            <summary>
                The window should not be painted until siblings beneath the window (that were created by the same thread) have been
                painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
                To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_MDICHILD">
            <summary>
                The window is a MDI child window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_TOOLWINDOW">
            <summary>
                The window is intended to be used as a floating toolbar.
                A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a
                smaller font.
                A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
                If a tool window has a system menu, its icon is not displayed on the title bar.
                However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_WINDOWEDGE">
            <summary>
                The window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_CLIENTEDGE">
            <summary>
                The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_CONTEXTHELP">
            <summary>
                The title bar of the window includes a question mark.
                When the user clicks the question mark, the cursor changes to a question mark with a pointer.
                If the user then clicks a child window, the child receives a WM_HELP message.
                The child window should pass the message to the parent window procedure, which should call the WinHelp function
                using the HELP_WM_HELP command.
                The Help application displays a pop-up window that typically contains help for the child window.
                WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_RIGHT">
            <summary>
                The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only
                if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the
                style is ignored.
                Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT
                style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON
                styles.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_LEFT">
            <summary>
                The window has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_RTLREADING">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text
                is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_LTRREADING">
            <summary>
                The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_LEFTSCROLLBAR">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical
                scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_RIGHTSCROLLBAR">
            <summary>
                The vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_CONTROLPARENT">
            <summary>
                The window itself contains child windows that should take part in dialog box navigation.
                If this style is specified, the dialog manager recurses into children of this window when performing navigation
                operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_STATICEDGE">
            <summary>
                The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_APPWINDOW">
            <summary>
                Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_OVERLAPPEDWINDOW">
            <summary>
                The window is an overlapped window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_PALETTEWINDOW">
            <summary>
                The window is palette window, which is a modeless dialog box that presents an array of commands.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_LAYERED">
            <summary>
                The window is a layered window. This style cannot be used if the window has a class style of either CS_OWNDC or
                CS_CLASSDC.
                Windows 8:  The WS_EX_LAYERED style is supported for top-level windows and child windows.
                Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_NOINHERITLAYOUT">
            <summary>
                The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_NOREDIRECTIONBITMAP">
            <summary>
                The window does not render to a redirection surface.
                This is for windows that do not have visible content or that use mechanisms other than surfaces to provide their
                visual.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_LAYOUTRTL">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the horizontal
                origin of the window is on the right edge. Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_COMPOSITED">
            <summary>
                Paints all descendants of a window in bottom-to-top painting order using double-buffering.
                For more information, see Remarks.
                This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ExtendedWindowStyleFlags.WS_EX_NOACTIVATE">
            <summary>
                A top-level window created with this style does not become the foreground window when the user clicks it. The
                system does not bring this window to the foreground when the user minimizes or closes the foreground window.
                To activate the window, use the SetActiveWindow or SetForegroundWindow function.
                The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the
                WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.GetWindowCommands">
            <summary>
                Used by the user32.GetWindow function
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633515(v=vs.85).aspx">GetWindow function</a>
                The relationship between the specified window and the window whose handle is to be retrieved. This parameter can be
                one of the following values.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_HWNDFIRST">
            <summary>
                The retrieved handle identifies the window of the same type that is highest in the Z order.
                If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a
                top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle
                identifies a sibling window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_HWNDLAST">
            <summary>
                The retrieved handle identifies the window of the same type that is lowest in the Z order.
                If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a
                top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle
                identifies a sibling window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_HWNDNEXT">
            <summary>
                The retrieved handle identifies the window below the specified window in the Z order.
                If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a
                top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle
                identifies a sibling window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_HWNDPREV">
            <summary>
                The retrieved handle identifies the window above the specified window in the Z order.
                If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a
                top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle
                identifies a sibling window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_OWNER">
            <summary>
                The retrieved handle identifies the specified window's owner window, if any. For more information, see Owned
                Windows:
                An overlapped or pop-up window can be owned by another overlapped or pop-up window. Being owned places several
                constraints on a window.
                An owned window is always above its owner in the z-order.
                The system automatically destroys an owned window when its owner is destroyed.
                An owned window is hidden when its owner is minimized.
                Only an overlapped or pop-up window can be an owner window; a child window cannot be an owner window. An
                application creates an owned window by specifying the owner's window handle as the hWndParent parameter of
                CreateWindowEx when it creates a window with the WS_OVERLAPPED or WS_POPUP style. The hWndParent parameter must
                identify an overlapped or pop-up window. If hWndParent identifies a child window, the system assigns ownership to
                the top-level parent window of the child window. After creating an owned window, an application cannot transfer
                ownership of the window to another window.
                Dialog boxes and message boxes are owned windows by default. An application specifies the owner window when calling
                a function that creates a dialog box or message box.
                An application can use the GetWindow function with the GW_OWNER flag to retrieve a handle to a window's owner.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_CHILD">
            <summary>
                The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent
                window; otherwise, the retrieved handle is NULL. The function examines only child windows of the specified window.
                It does not examine descendant windows.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.GetWindowCommands.GW_ENABLEDPOPUP">
            <summary>
                The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first
                such window found using GW_HWNDNEXT); otherwise, if there are no enabled popup windows, the retrieved handle is
                that of the specified window.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.MonitorFrom">
            <summary>
                Flags for the MonitorFromRect / MonitorFromWindow "flags" field
                see <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145063(v=vs.85).aspx">MonitorFromRect function</a>
                or see <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145064(v=vs.85).aspx">MonitorFromWindow function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.MonitorFrom.DefaultToNearest">
            <summary>
                Returns a handle to the display monitor that is nearest to the rectangle.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.MonitorFrom.DefaultToNull">
            <summary>
                Returns NULL. (why??)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.MonitorFrom.DefaultToPrimary">
            <summary>
                Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.MonitorInfoFlags">
            <summary>
                A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.MonitorInfoFlags.Primary">
            <summary>
                This is the primary display monitor.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ObjectIdentifiers">
            <summary>
                Used for User32.SetWinEventHook
                See WinUser.h or <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd373606.aspx">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Window">
            <summary>
                The window itself rather than a child object.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.SystemMenu">
            <summary>
                The window's system menu.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.TitleBar">
            <summary>
                The window's title bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Menu">
            <summary>
                The window's menu bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Client">
            <summary>
                The window's client area.
                In most cases, the operating system controls the frame elements and the client object contains all elements that
                are controlled by the application.
                Servers only process the WM_GETOBJECT messages in which the lParam is OBJID_CLIENT, OBJID_WINDOW, or a custom
                object identifier.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.VerticalScrollbar">
            <summary>
                The window's vertical scroll bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.HorizontalScrollbar">
            <summary>
                The window's horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.SizeGrip">
            <summary>
                The window's size grip: an optional frame component located at the lower-right corner of the window frame.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Caret">
            <summary>
                The text insertion bar (caret) in the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Cursor">
            <summary>
                The mouse pointer. There is only one mouse pointer in the system, and it is not a child of any window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Alert">
            <summary>
                An alert that is associated with a window or an application.
                System provided message boxes are the only UI elements that send events with this object identifier.
                Server applications cannot use the AccessibleObjectFromX functions with this object identifier.
                This is a known issue with Microsoft Active Accessibility.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.Sound">
            <summary>
                A sound object. Sound objects do not have screen locations or children, but they do have name and state attributes.
                They are children of the application that is playing the sound.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.QueryClassNameIndex">
            <summary>
                An object identifier that Oleacc.dll uses internally.
                For more information, see Appendix F: Object Identifier Values for OBJID_QUERYCLASSNAMEIDX.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectIdentifiers.NativeObjectModel">
            <summary>
                In response to this object identifier, third-party applications can expose their own object model.
                Third-party applications can return any COM interface in response to this object identifier.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ObjectStates">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd373609(v=vs.85).aspx">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_NORMAL">
            <summary>
                Indicates that the object does not have another state assigned to it.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_UNAVAILABLE">
            <summary>
                The object is unavailable.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_SELECTED">
            <summary>
                The object is selected.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_FOCUSED">
            <summary>
                The object has the keyboard focus. Do not confuse object focus with object selection. For more information, see
                Selection and Focus Properties and Methods. For objects with this object state, send the EVENT_OBJECT_SHOW or
                EVENT_OBJECT_HIDE WinEvents to notify client applications about state changes. Do not use EVENT_OBJECT_STATECHANGE.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_PRESSED">
            <summary>
                The object is pressed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_CHECKED">
            <summary>
                The object's check box is selected.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_MIXED">
            <summary>
                Indicates that the state of a three-state check box or toolbar button is not determined. The check box is neither
                selected nor cleared and is therefore in the third or mixed state.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_INDETERMINATE">
            <summary>
                Same as STATE_SYSTEM_MIXED
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_READONLY">
            <summary>
                The object is designated read-only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_HOTTRACKED">
            <summary>
                The object is hot-tracked by the mouse, which means that the object's appearance has changed to indicate that the
                mouse pointer is located over it.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_DEFAULT">
            <summary>
                This state represents the default button in a window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_EXPANDED">
            <summary>
                The object's children that have the ROLE_SYSTEM_OUTLINEITEM role are displayed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_COLLAPSED">
            <summary>
                The object's children that have the ROLE_SYSTEM_OUTLINEITEM role are hidden.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_BUSY">
            <summary>
                The control cannot accept input at this time.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_FLOATING">
            <summary>
                The object is not clipped to the boundary of its parent object, and it does not move automatically when the parent
                moves.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_MARQUEED">
            <summary>
                Indicates scrolling or moving text or graphics.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_ANIMATED">
            <summary>
                The object's appearance changes rapidly or constantly. Graphics that are animated occasionally are described as
                ROLE_SYSTEM_GRAPHIC with the State property set to STATE_SYSTEM_ANIMATED. This state is used to indicate that the
                object's location is changing.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_INVISIBLE">
            <summary>
                The object is programmatically hidden. For example, menu itmes are programmatically hidden until a user activates
                the menu. Because objects with this state are not available to users, client applications must not communicate
                information about the object to users. However, if client applications find an object with this state, they should
                check whether STATE_SYSTEM_OFFSCREEN is also set. If this second state is defined, clients can communicate the
                information about the object to users. For example, a list box can have both STATE_SYSTEM_INVISIBLE and
                STATE_SYSTEM_OFFSCREEN set. In this case, the client application can communicate all items in the list to users.
                If a client application is navigating through an IAccessible tree and encounters a parent object that is invisible,
                Microsoft Active Accessibility will not expose information about any possible children of the parent as long as the
                parent is invisible.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_OFFSCREEN">
            <summary>
                The object is clipped or has scrolled out of view, but it is not programmatically hidden. If the user makes the
                viewport larger, more of the object will be visible on the computer screen.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_SIZEABLE">
            <summary>
                The object can be resized. For example, a user could change the size of a window by dragging it by the border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_MOVEABLE">
            <summary>
                Indicates that the object can be moved. For example, a user can click the object's title bar and drag the object to
                a new location.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_SELFVOICING">
            <summary>
                The object or child uses text-to-speech (TTS) technology for description purposes. When an object with this state
                has the focus, a speech-based accessibility aid does not announce information because the object automatically
                announces it.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_FOCUSABLE">
            <summary>
                The object is on the active window and is ready to receive keyboard focus.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_SELECTABLE">
            <summary>
                The object accepts selection.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_LINKED">
            <summary>
                Indicates that the object is formatted as a hyperlink. The object's role will usually be ROLE_SYSTEM_TEXT.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_TRAVERSED">
            <summary>
                The object is a hyperlink that has been visited (previously clicked) by a user.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_MULTISELECTABLE">
            <summary>
                Indicates that the object accepts multiple selected items; that is, SELFLAG_ADDSELECTION for the
                IAccessible::accSelect method is valid.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_EXTSELECTABLE">
            <summary>
                Indicates that an object extends its selection by using SELFLAG_EXTENDSELECTION in the IAccessible::accSelect
                method.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_ALERT_LOW">
            <summary>
                Indicates low-priority information that is not important to the user. This state is used, for example, when Word
                changes the appearance of the TipWizard button on its toolbar to indicate that it has a hint for the user.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_ALERT_MEDIUM">
            <summary>
                Indicates important information that is not conveyed immediately to the user. For example, when a battery is
                starting to reach a low level, a level indicator generates a medium-level alert. A blind access tool then generates
                a sound to let the user know that important information is available, without actually interrupting the user's
                work. The user could then query the alert information when convenient.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_ALERT_HIGH">
            <summary>
                Indicates important information to be immediately conveyed to the user. For example, when a battery reaches a
                critically low level, a level indicator generates a high-level alert. As a result, a blind access tool immediately
                announces this information to the user, and a screen magnification program scrolls the screen so that the battery
                indicator is in view. This state is also appropriate for any prompt or operation that must be completed before the
                user can continue.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_PROTECTED">
            <summary>
                The object is a password-protected edit control.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_HASPOPUP">
            <summary>
                When invoked, the object displays a pop-up menu or a window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ObjectStates.STATE_SYSTEM_VALID">
            <summary>
                A bitmask representing all valid state flags
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.PrintWindowFlags">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd162869(v=vs.85).aspx">PrintWindow function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.PrintWindowFlags.PW_COMPLETE">
            <summary>
                Copy the complete window
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.PrintWindowFlags.PW_CLIENTONLY">
            <summary>
                Only the client area of the window is copied.
                By default, the entire window is copied.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.RegionResults">
            <summary>
                See See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd144950(v=vs.85).aspx">GetWindowRgn function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.RegionResults.Error">
            <summary>
                The specified window does not have a region, or an error occurred while attempting to return the region.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.RegionResults.NullRegion">
            <summary>
                The region is empty.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.RegionResults.SimpleRegion">
            <summary>
                The region is a single rectangle.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.RegionResults.ComplexRegion">
            <summary>
                The region is more than one rectangle.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ScrollBarCommands">
            <summary>
                See
                <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb787577(v=vs.85).aspx">WM_VSCROLL message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_LINEUP">
            <summary>
                Scrolls one line up.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_LINELEFT">
            <summary>
                Same as SB_LINEUP, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_LINEDOWN">
            <summary>
                Scrolls one line down.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_LINERIGHT">
            <summary>
                Same as SB_LINEDOWN, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_PAGEUP">
            <summary>
                Scrolls one page up.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_PAGELEFT">
            <summary>
                Same as SB_PAGEUP, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_PAGEDOWN">
            <summary>
                Scrolls one page down.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_PAGERIGHT">
            <summary>
                Same as SB_PAGEDOWN, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_THUMBPOSITION">
            <summary>
                The user has dragged the scroll box (thumb) and released the mouse button.
                The HIWORD indicates the position of the scroll box at the end of the drag operation.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_THUMBTRACK">
            <summary>
                The user is dragging the scroll box.
                This message is sent repeatedly until the user releases the mouse button.
                The HIWORD indicates the position that the scroll box has been dragged to.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_TOP">
            <summary>
                Scrolls to the upper left.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_LEFT">
            <summary>
                Same as SB_TOP, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_BOTTOM">
            <summary>
                Scrolls to the lower right.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_RIGHT">
            <summary>
                Same as SB_BOTTOM, can be used when thinking horizontally
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarCommands.SB_ENDSCROLL">
            <summary>
                Ends scroll.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787535(v=vs.85).aspx">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.Scrollbar">
            <summary>
                The scroll bar itself.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.TopOrRightArrow">
            <summary>
                The top or right arrow button.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.PageUpOrRightRegion">
            <summary>
                The page up or page right region.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.ScrollBox">
            <summary>
                The scroll box (thumb).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.PageDownOrLeftRegion">
            <summary>
                The page down or page left region.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarStateIndexes.ButtonOrLeftArrow">
            <summary>
                The bottom or left arrow button.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ScrollBarTypes">
            <summary>
                See <a href="http://pinvoke.net/default.aspx/Enums/SBOrientation.html">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarTypes.Horizontal">
            <summary>
                The horizontal scroll bar of the specified window
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarTypes.Vertical">
            <summary>
                The vertical scroll bar of the specified window
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarTypes.Control">
            <summary>
                A scroll bar control
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollBarTypes.Both">
            <summary>
                The horizontal and vertical scroll bars of the specified window
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ScrollInfoMask">
            <summary>
                The ScrollInfoMask enum is used for retrieving the SCROLLINFO via the GetScrollInfo
                See <a href="http://pinvoke.net/default.aspx/Enums/ScrollInfoMask.html">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.Range">
            <summary>
                Copies the scroll range to the Minimum and Maximum members of the SCROLLINFO structure pointed to by lpsi.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.Page">
            <summary>
                Copies the scroll page to the PageSize member of the SCROLLINFO structure pointed to by lpsi.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.Pos">
            <summary>
                Copies the scroll position to the Position member of the SCROLLINFO structure pointed to by lpsi.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.DisableNoScroll">
            <summary>
                Unknown
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.Trackpos">
            <summary>
                Copies the current scroll box tracking position to the TrackingPosition member of the SCROLLINFO structure pointed
                to by
                lpsi.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollInfoMask.All">
            <summary>
                All of the above
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ScrollModes">
            <summary>
                Scroll-modes for the WindowScroller
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollModes.AbsoluteWindowMessage">
            <summary>
                Send message to the window with an absolute position
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollModes.WindowsMessage">
            <summary>
                Send message to the window for page up or down
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollModes.MouseWheel">
            <summary>
                Send a mousewheel event
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ScrollModes.KeyboardPageUpDown">
            <summary>
                Send page up or down as key press
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644952(v=vs.85).aspx">SendMessageTimeout function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags.Normal">
            <summary>
                The calling thread is not prevented from processing other requests while waiting for the function to return.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags.Block">
            <summary>
                Prevents the calling thread from processing any other requests until the function returns.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags.AbortIfHung">
            <summary>
                The function returns without waiting for the time-out period to elapse if the receiving thread appears to not
                respond or "hangs."
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags.NoTimeoutIfNotHung">
            <summary>
                The function does not enforce the time-out period as long as the receiving thread is processing messages.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags.ErrorOnExit">
            <summary>
                The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is
                being processed.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.ShowWindowCommands">
            <summary>
                Used by User32.ShowWindow
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Hide">
            <summary>
                Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Normal">
            <summary>
                Activates and displays a window. If the window is minimized or
                maximized, the system restores it to its original size and position.
                An application should specify this flag when displaying the window
                for the first time.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowMinimized">
            <summary>
                Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Maximize">
            <summary>
                Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowMaximized">
            <summary>
                Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowRecentNoActivation">
            <summary>
                Displays a window in its most recent size and position. This value
                is similar to <see cref="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Normal" />, except
                the window is not activated.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Show">
            <summary>
                Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Minimize">
            <summary>
                Minimizes the specified window and activates the next top-level
                window in the Z order.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowMinNoActivation">
            <summary>
                Displays the window as a minimized window. This value is similar to
                <see cref="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowMinimized" />, except the
                window is not activated.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowNoActivation">
            <summary>
                Displays the window in its current size and position. This value is
                similar to <see cref="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Show" />, except the
                window is not activated.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.Restore">
            <summary>
                Activates and displays the window. If the window is minimized or
                maximized, the system restores it to its original size and position.
                An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ShowDefault">
            <summary>
                Sets the show state based on the SW_* value specified in the
                STARTUPINFO structure passed to the CreateProcess function by the
                program that started the application.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.ShowWindowCommands.ForceMinimize">
            <summary>
                <b>Windows 2000/XP:</b> Minimizes a window, even if the thread
                that owns the window is not responding. This flag should only be
                used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SysColorIndexes">
            <summary>
            The display element whose color is to be retrieved.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724371.aspx">GetSysColor function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorScrollbar">
            <summary>
            Scroll bar gray area.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBackground">
            <summary>
            Desktop.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorActivecaption">
            <summary>
            Active window title bar.
            The associated foreground color is COLOR_CAPTIONTEXT.
            Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorInactivecaption">
            <summary>
            Inactive window caption.
            The associated foreground color is COLOR_INACTIVECAPTIONTEXT.
            Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorMenu">
            <summary>
            Menu background.
            The associated foreground color is COLOR_MENUTEXT.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorWindow">
            <summary>
            Window background.
            The associated foreground colors are COLOR_WINDOWTEXT and COLOR_HOTLITE.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorWindowframe">
            <summary>
            Window frame.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorMenutext">
            <summary>
            Text in menus.
            The associated background color is COLOR_MENU.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorWindowtext">
            <summary>
            Text in windows.
            The associated background color is COLOR_WINDOW.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorCaptiontext">
            <summary>
            Text in caption, size box, and scroll bar arrow box.
            The associated background color is COLOR_ACTIVECAPTION
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorActiveborder">
            <summary>
            Active window border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorInactiveborder">
            <summary>
            Inactive window border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorAppworkspace">
            <summary>
            Background color of multiple document interface (MDI) applications.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorHighlight">
            <summary>
            Item(s) selected in a control.
            The associated foreground color is COLOR_HIGHLIGHTTEXT.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorHighlighttext">
            <summary>
            Text of item(s) selected in a control.
            The associated background color is COLOR_HIGHLIGHT.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBtnface">
            <summary>
            Face color for three-dimensional display elements and for dialog box backgrounds.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBtnshadow">
            <summary>
            Shadow color for three-dimensional display elements (for edges facing away from the light source).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorGraytext">
            <summary>
            Grayed (disabled) text.
            This color is set to 0 if the current display driver does not support a solid gray color.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBtntext">
            <summary>
            Text on push buttons.
            The associated background color is COLOR_BTNFACE.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorInactivecaptiontext">
            <summary>
            Color of text in an inactive caption.
            The associated background color is COLOR_INACTIVECAPTION.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBtnhighlight">
            <summary>
            Highlight color for three-dimensional display elements (for edges facing the light source.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Ddkshadow">
            <summary>
            Dark shadow for three-dimensional display elements.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Dlight">
            <summary>
            Light color for three-dimensional display elements (for edges facing the light source.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorInfotext">
            <summary>
            Text color for tooltip controls.
            The associated background color is COLOR_INFOBK.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorInfobk">
            <summary>
            Background color for tooltip controls.
            The associated foreground color is COLOR_INFOTEXT.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorHotlight">
            <summary>
            Color for a hyperlink or hot-tracked item.
            The associated background color is COLOR_WINDOW.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorGradientactivecaption">
            <summary>
            Right side color in the color gradient of an active window's title bar.
            COLOR_ACTIVECAPTION specifies the left side color.
            Use SPI_GETGRADIENTCAPTIONS with the SystemParametersInfo function to determine whether the gradient effect is enabled.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorGradientinactivecaption">
            <summary>
            Right side color in the color gradient of an inactive window's title bar.
            COLOR_INACTIVECAPTION specifies the left side color.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorMenuhighlight">
             <summary>
             The color used to highlight menu items when the menu appears as a flat menu (see SystemParametersInfo).
             The highlighted menu item is outlined with COLOR_HIGHLIGHT.
            Windows 2000:  This value is not supported.
             </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorMenubar">
             <summary>
             The background color for the menu bar when menus appear as flat menus (see SystemParametersInfo).
             However, COLOR_MENU continues to specify the background color of the menu popup.
            Windows 2000:  This value is not supported.
             </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorDesktop">
            <summary>
            Desktop
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Dface">
            <summary>
            Shadow color for three-dimensional display elements (for edges facing away from the light source).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Dshadow">
            <summary>
            Shadow color for three-dimensional display elements (for edges facing away from the light source).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Dhighlight">
            <summary>
            Highlight color for three-dimensional display elements (for edges facing the light source.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.Color3Dhilight">
            <summary>
            Highlight color for three-dimensional display elements (for edges facing the light source.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorBtnhilight">
            <summary>
            Highlight color for three-dimensional display elements (for edges facing the light source.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysColorIndexes.ColorMaxvalue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SysCommands">
            <summary>
                A window receives this message when the user chooses a command from the Window menu
               (formerly known as the system or control menu)
                or when the user chooses the maximize button, minimize button, restore button, or close button.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_SIZE">
            <summary>
                Sizes the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_MOVE">
            <summary>
                Moves the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_MINIMIZE">
            <summary>
                Minimizes the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_MAXIMIZE">
            <summary>
                Maximizes the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_NEXTWINDOW">
            <summary>
                Moves to the next window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_PREVWINDOW">
            <summary>
                Moves to the previous window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_CLOSE">
            <summary>
                Closes the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_VSCROLL">
            <summary>
                Scrolls vertically.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_HSCROLL">
            <summary>
                Scrolls horizontally.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_MOUSEMENU">
            <summary>
                Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_KEYMENU">
            <summary>
                Retrieves the window menu as a result of a keystroke.
                If the wParam is SC_KEYMENU, lParam contains the character code of the key that is used with the ALT key to display
                the popup menu. For example, pressing ALT+F to display the File popup will cause a WM_SYSCOMMAND with wParam equal
                to SC_KEYMENU and lParam equal to 'f'.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_ARRANGE">
            <summary>
                TODO
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_RESTORE">
            <summary>
                Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_TASKLIST">
            <summary>
                Activates the Start menu.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_SCREENSAVE">
            <summary>
                Executes the screen saver application specified in the [boot] section of the System.ini file.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_HOTKEY">
            <summary>
                Activates the window associated with the application-specified hot key. The lParam parameter identifies the window
                to activate.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_DEFAULT">
            <summary>
                Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_MONITORPOWER">
            <summary>
                Sets the state of the display. This command supports devices that have power-saving features, such as a
                battery-powered personal computer.
                The lParam parameter can have the following values:
                -1 (the display is powering on)
                1 (the display is going to low power)
                2 (the display is being shut off)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_CONTEXTHELP">
            <summary>
                Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the
                control receives a WM_HELP message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_SEPARATOR">
            <summary>
                TODO
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SCF_ISSECURE">
            <summary>
                Indicates whether the screen saver is secure.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_ICON">
            <summary>
                Same as SC_MINIMIZE
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SysCommands.SC_ZOOM">
            <summary>
                Same as SC_MAXIMIZE
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SystemMetric">
            <summary>
                Flags used with the Windows API (User32.dll):GetSystemMetrics(SystemMetric smIndex)
                This Enum and declaration signature was written by Gabriel T. Sharp
                ai_productions@verizon.net or osirisgothra@hotmail.com
                Obtained on pinvoke.net, please contribute your code to support the wiki!
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXSCREEN">
            <summary>
                Width of the screen of the primary display monitor, in pixels. This is the same values obtained by calling
                GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSCREEN">
            <summary>
                Height of the screen of the primary display monitor, in pixels. This is the same values obtained by calling
                GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYVSCROLL">
            <summary>
                Width of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXVSCROLL">
            <summary>
                Height of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYCAPTION">
            <summary>
                Height of a caption area, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXBORDER">
            <summary>
                Width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYBORDER">
            <summary>
                Height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXDLGFRAME">
            <summary>
                Thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
                SM_CXFIXEDFRAME is the height of the horizontal border and SM_CYFIXEDFRAME is the width of the vertical border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYDLGFRAME">
            <summary>
                Thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
                SM_CXFIXEDFRAME is the height of the horizontal border and SM_CYFIXEDFRAME is the width of the vertical border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYVTHUMB">
            <summary>
                Height of the thumb box in a vertical scroll bar, in pixels
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXHTHUMB">
            <summary>
                Width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXICON">
            <summary>
                Default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions specified by
                SM_CXICON and SM_CYICON
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYICON">
            <summary>
                Default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions SM_CXICON and
                SM_CYICON.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXCURSOR">
            <summary>
                Width of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYCURSOR">
            <summary>
                Height of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMENU">
            <summary>
                Height of a single-line menu bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXFULLSCREEN">
            <summary>
                Width of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates
                of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the
                SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYFULLSCREEN">
            <summary>
                Height of the client area for a full-screen window on the primary display monitor, in pixels. To get the
                coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
                call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYKANJIWINDOW">
            <summary>
                For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the
                screen, in pixels
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MOUSEWHEELPRESENT">
            <summary>
                Nonzero if a mouse with a wheel is installed; zero otherwise
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYHSCROLL">
            <summary>
                Height of the arrow bitmap on a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXHSCROLL">
            <summary>
                Width of the arrow bitmap on a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_DEBUG">
            <summary>
                Nonzero if the debug version of User.exe is installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SWAPBUTTON">
            <summary>
                Nonzero if the left and right mouse buttons are reversed; zero otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_RESERVED1">
            <summary>
                Reserved for future use
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_RESERVED2">
            <summary>
                Reserved for future use
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_RESERVED3">
            <summary>
                Reserved for future use
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_RESERVED4">
            <summary>
                Reserved for future use
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMIN">
            <summary>
                Minimum width of a window, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMIN">
            <summary>
                Minimum height of a window, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXSIZE">
            <summary>
                Width of a button in a window's caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSIZE">
            <summary>
                Height of a button in a window's caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXFRAME">
            <summary>
                Thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is
                the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYFRAME">
            <summary>
                Thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is
                the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMINTRACK">
            <summary>
                Minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these
                dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMINTRACK">
            <summary>
                Minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these
                dimensions. A window can override this value by processing the WM_GETMINMAXINFO message
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXDOUBLECLK">
            <summary>
                Width of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click
                must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two
                clicks a double-click
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYDOUBLECLK">
            <summary>
                Height of the rectangle around the location of a first click in a double-click sequence, in pixels. The second
                click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the
                two clicks a double-click. (The two clicks must also occur within a specified time.)
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXICONSPACING">
            <summary>
                Width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size
                SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYICONSPACING">
            <summary>
                Height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size
                SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MENUDROPALIGNMENT">
            <summary>
                Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; zero if the menus are
                left-aligned.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_PENWINDOWS">
            <summary>
                Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_DBCSENABLED">
            <summary>
                Nonzero if User32.dll supports DBCS; zero otherwise. (WinMe/95/98): Unicode
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CMOUSEBUTTONS">
            <summary>
                Number of buttons on mouse, or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXFIXEDFRAME">
            <summary>
                Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYFIXEDFRAME">
            <summary>
                Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXSIZEFRAME">
            <summary>
                Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSIZEFRAME">
            <summary>
                Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SECURE">
            <summary>
                Nonzero if security is present; zero otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXEDGE">
            <summary>
                Width of a 3-D border, in pixels. This is the 3-D counterpart of SM_CXBORDER
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYEDGE">
            <summary>
                Height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMINSPACING">
            <summary>
                Width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when
                arranged. This value is always greater than or equal to SM_CXMINIMIZED.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMINSPACING">
            <summary>
                Height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when
                arranged. This value is always greater than or equal to SM_CYMINIMIZED.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXSMICON">
            <summary>
                Recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon
                view
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSMICON">
            <summary>
                Recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon
                view.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSMCAPTION">
            <summary>
                Height of a small caption, in pixels
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXSMSIZE">
            <summary>
                Width of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYSMSIZE">
            <summary>
                Height of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMENUSIZE">
            <summary>
                Width of menu bar buttons, such as the child window close button used in the multiple document interface, in
                pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMENUSIZE">
            <summary>
                Height of menu bar buttons, such as the child window close button used in the multiple document interface, in
                pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_ARRANGE">
            <summary>
                Flags specifying how the system arranged minimized windows
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMINIMIZED">
            <summary>
                Width of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMINIMIZED">
            <summary>
                Height of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMAXTRACK">
            <summary>
                Default maximum width of a window that has a caption and sizing borders, in pixels. This metric refers to the
                entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override
                this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMAXTRACK">
            <summary>
                Default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the
                entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override
                this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMAXIMIZED">
            <summary>
                Default width, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMAXIMIZED">
            <summary>
                Default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_NETWORK">
            <summary>
                Least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for
                future use
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CLEANBOOT">
            <summary>
                Value that specifies how the system was started: 0-normal, 1-failsafe, 2-failsafe /w net
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXDRAG">
            <summary>
                Width of a rectangle centered on a drag point to allow for limited movement of the mouse pointer before a drag
                operation begins, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYDRAG">
            <summary>
                Height of a rectangle centered on a drag point to allow for limited movement of the mouse pointer before a drag
                operation begins. This value is in pixels. It allows the user to click and release the mouse button easily without
                unintentionally starting a drag operation.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SHOWSOUNDS">
            <summary>
                Nonzero if the user requires an application to present information visually in situations where it would otherwise
                present the information only in audible form; zero otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXMENUCHECK">
            <summary>
                Width of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYMENUCHECK">
            <summary>
                Height of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SLOWMACHINE">
            <summary>
                Nonzero if the computer has a low-end (slow) processor; zero otherwise
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MIDEASTENABLED">
            <summary>
                Nonzero if the system is enabled for Hebrew and Arabic languages, zero if not.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MOUSEPRESENT">
            <summary>
                Nonzero if a mouse is installed; zero otherwise. This value is rarely zero, because of support for virtual mice and
                because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_XVIRTUALSCREEN">
            <summary>
                Windows 2000 (v5.0+) Coordinate of the top of the virtual screen
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_YVIRTUALSCREEN">
            <summary>
                Windows 2000 (v5.0+) Coordinate of the left of the virtual screen
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXVIRTUALSCREEN">
            <summary>
                Windows 2000 (v5.0+) Width of the virtual screen
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYVIRTUALSCREEN">
            <summary>
                Windows 2000 (v5.0+) Height of the virtual screen
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CMONITORS">
            <summary>
                Number of display monitors on the desktop
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SAMEDISPLAYFORMAT">
            <summary>
                Windows XP (v5.1+) Nonzero if all the display monitors have the same color format, zero otherwise. Note that two
                displays can have the same bit depth, but different color formats. For example, the red, green, and blue pixels can
                be encoded with different numbers of bits, or those bits can be located in different places in a pixel's color
                value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_IMMENABLED">
            <summary>
                Windows XP (v5.1+) Nonzero if Input Method Manager/Input Method Editor features are enabled; zero otherwise
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXFOCUSBORDER">
            <summary>
                Windows XP (v5.1+) Width of the left and right edges of the focus rectangle drawn by DrawFocusRect. This value is
                in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CYFOCUSBORDER">
            <summary>
                Windows XP (v5.1+) Height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is
                in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_TABLETPC">
            <summary>
                Nonzero if the current operating system is the Windows XP Tablet PC edition, zero if not.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MEDIACENTER">
            <summary>
                Nonzero if the current operating system is the Windows XP, Media Center Edition, zero if not.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CMETRICS_OTHER">
            <summary>
                Metrics Other
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CMETRICS_2000">
            <summary>
                Metrics Windows 2000
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CMETRICS_NT">
            <summary>
                Metrics Windows NT
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SERVERR2">
            <summary>
                The build number if the system is Windows Server 2003 R2; otherwise, 0
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MOUSEHORIZONTALWHEELPRESENT">
            <summary>
                Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_CXPADDEDBORDER">
            <summary>
                The amount of border padding for captioned windows, in pixels.
                Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_DIGITIZER">
            <summary>
                Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is
                started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the
                device. For more information, see Remarks.
                Windows Server 2008, Windows Vista and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_MAXIMUMTOUCHES">
            <summary>
                Nonzero if there are digitizers in the system; otherwise, 0.
                SM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in
                the system. If the system has only single-touch digitizers, the return value is 1. If the system has multi-touch
                digitizers, the return value is the number of simultaneous contacts the hardware can provide.
                Windows Server 2008, Windows Vista and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_REMOTESESSION">
            <summary>
                Windows XP (v5.1+) This system metric is used in a Terminal Services environment. If the calling process is
                associated with a Terminal Services client session, the return value is nonzero. If the calling process is
                associated with the Terminal Server console session, the return value is zero. The console session is not
                necessarily the physical console - see WTSGetActiveConsoleSessionId for more information.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_SHUTTINGDOWN">
            <summary>
                Windows XP (v5.1+) Nonzero if the current session is shutting down; zero otherwise
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemMetric.SM_REMOTECONTROL">
            <summary>
                Windows XP (v5.1+) This system metric is used in a Terminal Services environment. Its value is nonzero if the
                current session is remotely controlled; zero otherwise
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SystemParametersInfoActions">
            <summary>
                SPI_ System-wide parameter - Used in SystemParametersInfo function
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_NONE">
            <summary>
                No value
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETBEEP">
            <summary>
                Determines whether the warning beeper is on.
                The pvParam parameter must point to a BOOL variable that receives TRUE if the beeper is on, or FALSE if it is off.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETBEEP">
            <summary>
                Turns the warning beeper on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSE">
            <summary>
                Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSE">
            <summary>
                Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETBORDER">
            <summary>
                Retrieves the border multiplier factor that determines the width of a window's sizing border.
                The pvParam parameter must point to an integer variable that receives this value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETBORDER">
            <summary>
                Sets the border multiplier factor that determines the width of a window's sizing border.
                The uiParam parameter specifies the new value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETKEYBOARDSPEED">
            <summary>
                Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 (approximately 2.5 repetitions
                per second)
                through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary
                from
                a linear scale by as much as 20%. The pvParam parameter must point to a DWORD variable that receives the setting
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETKEYBOARDSPEED">
            <summary>
                Sets the keyboard repeat-speed setting. The uiParam parameter must specify a value in the range from 0
                (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second).
                The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%.
                If uiParam is greater than 31, the parameter is set to 31.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_LANGDRIVER">
            <summary>
                Not implemented.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_ICONHORIZONTALSPACING">
            <summary>
                Sets or retrieves the width, in pixels, of an icon cell. The system uses this rectangle to arrange icons in large
                icon view.
                To set this value, set uiParam to the new value and set pvParam to null. You cannot set this value to less than
                SM_CXICON.
                To retrieve this value, pvParam must point to an integer that receives the current value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSCREENSAVETIMEOUT">
            <summary>
                Retrieves the screen saver time-out value, in seconds. The pvParam parameter must point to an integer variable that
                receives the value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSCREENSAVETIMEOUT">
            <summary>
                Sets the screen saver time-out value to the value of the uiParam parameter. This value is the amount of time, in
                seconds,
                that the system must be idle before the screen saver activates.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSCREENSAVEACTIVE">
            <summary>
                Determines whether screen saving is enabled. The pvParam parameter must point to a bool variable that receives TRUE
                if screen saving is enabled, or FALSE otherwise.
                Does not work for Windows 7: http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSCREENSAVEACTIVE">
            <summary>
                Sets the state of the screen saver. The uiParam parameter specifies TRUE to activate screen saving, or FALSE to
                deactivate it.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETGRIDGRANULARITY">
            <summary>
                Retrieves the current granularity value of the desktop sizing grid. The pvParam parameter must point to an integer
                variable
                that receives the granularity.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETGRIDGRANULARITY">
            <summary>
                Sets the granularity of the desktop sizing grid to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDESKWALLPAPER">
            <summary>
                Sets the desktop wallpaper. The value of the pvParam parameter determines the new wallpaper. To specify a wallpaper
                bitmap,
                set pvParam to point to a null-terminated string containing the name of a bitmap file. Setting pvParam to ""
                removes the wallpaper.
                Setting pvParam to SETWALLPAPER_DEFAULT or null reverts to the default wallpaper.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDESKPATTERN">
            <summary>
                Sets the current desktop pattern by causing Windows to read the Pattern= setting from the WIN.INI file.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETKEYBOARDDELAY">
            <summary>
                Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 (approximately 250 ms delay)
                through 3
                (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware. The
                pvParam parameter must point to an integer variable that receives the setting.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETKEYBOARDDELAY">
            <summary>
                Sets the keyboard repeat-delay setting. The uiParam parameter must specify 0, 1, 2, or 3, where zero sets the
                shortest delay
                (approximately 250 ms) and 3 sets the longest delay (approximately 1 second). The actual delay associated with each
                value may
                vary depending on the hardware.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_ICONVERTICALSPACING">
            <summary>
                Sets or retrieves the height, in pixels, of an icon cell.
                To set this value, set uiParam to the new value and set pvParam to null. You cannot set this value to less than
                SM_CYICON.
                To retrieve this value, pvParam must point to an integer that receives the current value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETICONTITLEWRAP">
            <summary>
                Determines whether icon-title wrapping is enabled. The pvParam parameter must point to a bool variable that
                receives TRUE
                if enabled, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETICONTITLEWRAP">
            <summary>
                Turns icon-title wrapping on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMENUDROPALIGNMENT">
            <summary>
                Determines whether pop-up menus are left-aligned or right-aligned, relative to the corresponding menu-bar item.
                The pvParam parameter must point to a bool variable that receives TRUE if left-aligned, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMENUDROPALIGNMENT">
            <summary>
                Sets the alignment value of pop-up menus. The uiParam parameter specifies TRUE for right alignment, or FALSE for
                left alignment.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDOUBLECLKWIDTH">
            <summary>
                Sets the width of the double-click rectangle to the value of the uiParam parameter.
                The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be
                registered
                as a double-click.
                To retrieve the width of the double-click rectangle, call GetSystemMetrics with the SM_CXDOUBLECLK flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDOUBLECLKHEIGHT">
            <summary>
                Sets the height of the double-click rectangle to the value of the uiParam parameter.
                The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be
                registered
                as a double-click.
                To retrieve the height of the double-click rectangle, call GetSystemMetrics with the SM_CYDOUBLECLK flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETICONTITLELOGFONT">
            <summary>
                Retrieves the logical font information for the current icon-title font. The uiParam parameter specifies the size of
                a LOGFONT structure,
                and the pvParam parameter must point to the LOGFONT structure to fill in.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDOUBLECLICKTIME">
            <summary>
                Sets the double-click time for the mouse to the value of the uiParam parameter. The double-click time is the
                maximum number
                of milliseconds that can occur between the first and second clicks of a double-click. You can also call the
                SetDoubleClickTime
                function to set the double-click time. To get the current double-click time, call the GetDoubleClickTime function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEBUTTONSWAP">
            <summary>
                Swaps or restores the meaning of the left and right mouse buttons. The uiParam parameter specifies TRUE to swap the
                meanings
                of the buttons, or FALSE to restore their original meanings.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETICONTITLELOGFONT">
            <summary>
                Sets the font that is used for icon titles. The uiParam parameter specifies the size of a LOGFONT structure,
                and the pvParam parameter must point to a LOGFONT structure.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFASTTASKSWITCH">
            <summary>
                This flag is obsolete. Previous versions of the system use this flag to determine whether ALT+TAB fast task
                switching is enabled.
                For Windows 95, Windows 98, and Windows NT version 4.0 and later, fast task switching is always enabled.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFASTTASKSWITCH">
            <summary>
                This flag is obsolete. Previous versions of the system use this flag to enable or disable ALT+TAB fast task
                switching.
                For Windows 95, Windows 98, and Windows NT version 4.0 and later, fast task switching is always enabled.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDRAGFULLWINDOWS">
            <summary>
                Sets dragging of full windows either on or off. The uiParam parameter specifies TRUE for on, or FALSE for off.
                Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETDRAGFULLWINDOWS">
            <summary>
                Determines whether dragging of full windows is enabled. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if enabled, or FALSE otherwise.
                Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETNONCLIENTMETRICS">
            <summary>
                Retrieves the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point
                to a NONCLIENTMETRICS structure that receives the information. Set the cbSize member of this structure and the
                uiParam parameter
                to sizeof(NONCLIENTMETRICS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETNONCLIENTMETRICS">
            <summary>
                Sets the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point
                to a NONCLIENTMETRICS structure that contains the new parameters. Set the cbSize member of this structure
                and the uiParam parameter to sizeof(NONCLIENTMETRICS). Also, the lfHeight member of the LOGFONT structure must be a
                negative value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMINIMIZEDMETRICS">
            <summary>
                Retrieves the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(MINIMIZEDMETRICS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMINIMIZEDMETRICS">
            <summary>
                Sets the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(MINIMIZEDMETRICS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETICONMETRICS">
            <summary>
                Retrieves the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that
                receives
                the information. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETICONMETRICS">
            <summary>
                Sets the metrics associated with icons. The pvParam parameter must point to an ICONMETRICS structure that contains
                the new parameters. Set the cbSize member of this structure and the uiParam parameter to sizeof(ICONMETRICS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETWORKAREA">
            <summary>
                Sets the size of the work area. The work area is the portion of the screen not obscured by the system taskbar
                or by application desktop toolbars. The pvParam parameter is a pointer to a RECT structure that specifies the new
                work area rectangle,
                expressed in virtual screen coordinates. In a system with multiple display monitors, the function sets the work
                area
                of the monitor that contains the specified rectangle.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETWORKAREA">
            <summary>
                Retrieves the size of the work area on the primary display monitor. The work area is the portion of the screen not
                obscured
                by the system taskbar or by application desktop toolbars. The pvParam parameter must point to a RECT structure that
                receives
                the coordinates of the work area, expressed in virtual screen coordinates.
                To get the work area of a monitor other than the primary display monitor, call the GetMonitorInfo function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETPENWINDOWS">
            <summary>
                Windows Me/98/95:  Pen windows is being loaded or unloaded. The uiParam parameter is TRUE when loading and FALSE
                when unloading pen windows. The pvParam parameter is null.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETHIGHCONTRAST">
            <summary>
                Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a
                HIGHCONTRAST structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(HIGHCONTRAST).
                For a general discussion, see remarks.
                Windows NT:  This value is not supported.
            </summary>
            <remarks>
                There is a difference between the High Contrast color scheme and the High Contrast Mode. The High Contrast color
                scheme changes
                the system colors to colors that have obvious contrast; you switch to this color scheme by using the Display
                Options in the control panel.
                The High Contrast Mode, which uses SPI_GETHIGHCONTRAST and SPI_SETHIGHCONTRAST, advises applications to modify
                their appearance
                for visually-impaired users. It involves such things as audible warning to users and customized color scheme
                (using the Accessibility Options in the control panel). For more information, see HIGHCONTRAST on MSDN.
                For more information on general accessibility features, see Accessibility on MSDN.
            </remarks>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETHIGHCONTRAST">
            <summary>
                Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(HIGHCONTRAST).
                Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETKEYBOARDPREF">
            <summary>
                Determines whether the user relies on the keyboard instead of the mouse, and wants applications to display keyboard
                interfaces
                that would otherwise be hidden. The pvParam parameter must point to a BOOL variable that receives TRUE
                if the user relies on the keyboard; or FALSE otherwise.
                Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETKEYBOARDPREF">
            <summary>
                Sets the keyboard preference. The uiParam parameter specifies TRUE if the user relies on the keyboard instead of
                the mouse,
                and wants applications to display keyboard interfaces that would otherwise be hidden; uiParam is FALSE otherwise.
                Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSCREENREADER">
            <summary>
                Determines whether a screen reviewer utility is running. A screen reviewer utility directs textual information to
                an output device,
                such as a speech synthesizer or Braille display. When this flag is set, an application should provide textual
                information
                in situations where it would otherwise present the information graphically.
                The pvParam parameter is a pointer to a BOOL variable that receives TRUE if a screen reviewer utility is running,
                or FALSE otherwise.
                Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSCREENREADER">
            <summary>
                Determines whether a screen review utility is running. The uiParam parameter specifies TRUE for on, or FALSE for
                off.
                Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETANIMATION">
            <summary>
                Retrieves the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(ANIMATIONINFO).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETANIMATION">
            <summary>
                Sets the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(ANIMATIONINFO).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFONTSMOOTHING">
            <summary>
                Determines whether the font smoothing feature is enabled. This feature uses font antialiasing to make font curves
                appear smoother
                by painting pixels at different gray levels.
                The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is enabled, or FALSE if it is
                not.
                Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFONTSMOOTHING">
            <summary>
                Enables or disables the font smoothing feature, which uses font antialiasing to make font curves appear smoother
                by painting pixels at different gray levels.
                To enable the feature, set the uiParam parameter to TRUE. To disable the feature, set uiParam to FALSE.
                Windows 95:  This flag is supported only if Windows Plus! is installed. See SPI_GETWINDOWSEXTENSION.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDRAGWIDTH">
            <summary>
                Sets the width, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new
                value.
                To retrieve the drag width, call GetSystemMetrics with the SM_CXDRAG flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDRAGHEIGHT">
            <summary>
                Sets the height, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new
                value.
                To retrieve the drag height, call GetSystemMetrics with the SM_CYDRAG flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETHANDHELD">
            <summary>
                Used internally; applications should not use this value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETLOWPOWERTIMEOUT">
            <summary>
                Retrieves the time-out value for the low-power phase of screen saving. The pvParam parameter must point to an
                integer variable
                that receives the value. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETPOWEROFFTIMEOUT">
            <summary>
                Retrieves the time-out value for the power-off phase of screen saving. The pvParam parameter must point to an
                integer variable
                that receives the value. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETLOWPOWERTIMEOUT">
            <summary>
                Sets the time-out value, in seconds, for the low-power phase of screen saving. The uiParam parameter specifies the
                new value.
                The pvParam parameter must be null. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETPOWEROFFTIMEOUT">
            <summary>
                Sets the time-out value, in seconds, for the power-off phase of screen saving. The uiParam parameter specifies the
                new value.
                The pvParam parameter must be null. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETLOWPOWERACTIVE">
            <summary>
                Determines whether the low-power phase of screen saving is enabled. The pvParam parameter must point to a BOOL
                variable
                that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETPOWEROFFACTIVE">
            <summary>
                Determines whether the power-off phase of screen saving is enabled. The pvParam parameter must point to a BOOL
                variable
                that receives TRUE if enabled, or FALSE if disabled. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETLOWPOWERACTIVE">
            <summary>
                Activates or deactivates the low-power phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate.
                The pvParam parameter must be null. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETPOWEROFFACTIVE">
            <summary>
                Activates or deactivates the power-off phase of screen saving. Set uiParam to 1 to activate, or zero to deactivate.
                The pvParam parameter must be null. This flag is supported for 32-bit applications only.
                Windows NT, Windows Me/98:  This flag is supported for 16-bit and 32-bit applications.
                Windows 95:  This flag is supported for 16-bit applications only.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETCURSORS">
            <summary>
                Reloads the system cursors. Set the uiParam parameter to zero and the pvParam parameter to null.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETICONS">
            <summary>
                Reloads the system icons. Set the uiParam parameter to zero and the pvParam parameter to null.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETDEFAULTINPUTLANG">
            <summary>
                Retrieves the input locale identifier for the system default input language. The pvParam parameter must point
                to an HKL variable that receives this value. For more information, see Languages, Locales, and Keyboard Layouts on
                MSDN.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDEFAULTINPUTLANG">
            <summary>
                Sets the default input language for the system shell and applications. The specified language must be displayable
                using the current system character set. The pvParam parameter must point to an HKL variable that contains
                the input locale identifier for the default language. For more information, see Languages, Locales, and Keyboard
                Layouts on MSDN.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETLANGTOGGLE">
            <summary>
                Sets the hot key set for switching between input languages. The uiParam and pvParam parameters are not used.
                The value sets the shortcut keys in the keyboard property sheets by reading the registry again. The registry must
                be set before this flag is used. the path in the registry is \HKEY_CURRENT_USER\keyboard layout\toggle. Valid
                values are "1" = ALT+SHIFT, "2" = CTRL+SHIFT, and "3" = none.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETWINDOWSEXTENSION">
            <summary>
                Windows 95:  Determines whether the Windows extension, Windows Plus!, is installed. Set the uiParam parameter to 1.
                The pvParam parameter is not used. The function returns TRUE if the extension is installed, or FALSE if it is not.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSETRAILS">
            <summary>
                Enables or disables the Mouse Trails feature, which improves the visibility of mouse cursor movements by briefly
                showing
                a trail of cursors and quickly erasing them.
                To disable the feature, set the uiParam parameter to zero or 1. To enable the feature, set uiParam to a value
                greater than 1
                to indicate the number of cursors drawn in the trail.
                Windows 2000/NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSETRAILS">
            <summary>
                Determines whether the Mouse Trails feature is enabled. This feature improves the visibility of mouse cursor
                movements
                by briefly showing a trail of cursors and quickly erasing them.
                The pvParam parameter must point to an integer variable that receives a value. If the value is zero or 1, the
                feature is disabled.
                If the value is greater than 1, the feature is enabled and the value indicates the number of cursors drawn in the
                trail.
                The uiParam parameter is not used.
                Windows 2000/NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSCREENSAVERRUNNING">
            <summary>
                Windows Me/98:  Used internally; applications should not use this flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SCREENSAVERRUNNING">
            <summary>
                Same as SPI_SETSCREENSAVERRUNNING.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFILTERKEYS">
            <summary>
                Retrieves information about the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(FILTERKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFILTERKEYS">
            <summary>
                Sets the parameters of the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(FILTERKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETTOGGLEKEYS">
            <summary>
                Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(TOGGLEKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETTOGGLEKEYS">
            <summary>
                Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(TOGGLEKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSEKEYS">
            <summary>
                Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(MOUSEKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEKEYS">
            <summary>
                Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(MOUSEKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSHOWSOUNDS">
            <summary>
                Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application
                to present information visually in situations where it would otherwise present the information only in audible
                form.
                The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off.
                Using this value is equivalent to calling GetSystemMetrics (SM_SHOWSOUNDS). That is the recommended call.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSHOWSOUNDS">
            <summary>
                Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSTICKYKEYS">
            <summary>
                Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS
                structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(STICKYKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSTICKYKEYS">
            <summary>
                Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(STICKYKEYS).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETACCESSTIMEOUT">
            <summary>
                Retrieves information about the time-out period associated with the accessibility features. The pvParam parameter
                must point
                to an ACCESSTIMEOUT structure that receives the information. Set the cbSize member of this structure and the
                uiParam parameter
                to sizeof(ACCESSTIMEOUT).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETACCESSTIMEOUT">
            <summary>
                Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an
                ACCESSTIMEOUT
                structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(ACCESSTIMEOUT).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSERIALKEYS">
            <summary>
                Windows Me/98/95:  Retrieves information about the SerialKeys accessibility feature. The pvParam parameter must
                point
                to a SERIALKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam
                parameter
                to sizeof(SERIALKEYS).
                Windows Server 2003, Windows XP/2000/NT:  Not supported. The user controls this feature through the control panel.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSERIALKEYS">
            <summary>
                Windows Me/98/95:  Sets the parameters of the SerialKeys accessibility feature. The pvParam parameter must point
                to a SERIALKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam
                parameter
                to sizeof(SERIALKEYS).
                Windows Server 2003, Windows XP/2000/NT:  Not supported. The user controls this feature through the control panel.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSOUNDSENTRY">
            <summary>
                Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a
                SOUNDSENTRY structure
                that receives the information. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSOUNDSENTRY">
            <summary>
                Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY
                structure
                that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to
                sizeof(SOUNDSENTRY).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSNAPTODEFBUTTON">
            <summary>
                Determines whether the snap-to-default-button feature is enabled. If enabled, the mouse cursor automatically moves
                to the default button, such as OK or Apply, of a dialog box. The pvParam parameter must point to a BOOL variable
                that receives TRUE if the feature is on, or FALSE if it is off.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSNAPTODEFBUTTON">
            <summary>
                Enables or disables the snap-to-default-button feature. If enabled, the mouse cursor automatically moves to the
                default button,
                such as OK or Apply, of a dialog box. Set the uiParam parameter to TRUE to enable the feature, or FALSE to disable
                it.
                Applications should use the ShowWindow function when displaying a dialog box so the dialog manager can position the
                mouse cursor.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSEHOVERWIDTH">
            <summary>
                Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEHOVERWIDTH">
            <summary>
                Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSEHOVERHEIGHT">
            <summary>
                Retrieves the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the height.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEHOVERHEIGHT">
            <summary>
                Sets the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new height.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSEHOVERTIME">
            <summary>
                Retrieves the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the time.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEHOVERTIME">
            <summary>
                Sets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent
                to generate a WM_MOUSEHOVER message. This is used only if you pass HOVER_DEFAULT in the dwHoverTime parameter in
                the call to TrackMouseEvent. Set the uiParam parameter to the new time.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETWHEELSCROLLLINES">
            <summary>
                Retrieves the number of lines to scroll when the mouse wheel is rotated. The pvParam parameter must point
                to a UINT variable that receives the number of lines. The default value is 3.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETWHEELSCROLLLINES">
            <summary>
                Sets the number of lines to scroll when the mouse wheel is rotated. The number of lines is set from the uiParam
                parameter.
                The number of lines is the suggested number of lines to scroll when the mouse wheel is rolled without using
                modifier keys.
                If the number is 0, then no scrolling should occur. If the number of lines to scroll is greater than the number of
                lines viewable,
                and in particular if it is WHEEL_PAGESCROLL (#defined as UINT_MAX), the scroll operation should be interpreted
                as clicking once in the page down or page up regions of the scroll bar.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMENUSHOWDELAY">
            <summary>
                Retrieves the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse cursor
                is
                over a submenu item. The pvParam parameter must point to a DWORD variable that receives the time of the delay.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMENUSHOWDELAY">
            <summary>
                Sets uiParam to the time, in milliseconds, that the system waits before displaying a shortcut menu when the mouse
                cursor is
                over a submenu item.
                Windows 95:  Not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSHOWIMEUI">
            <summary>
                Determines whether the IME status window is visible (on a per-user basis). The pvParam parameter must point to a
                BOOL variable
                that receives TRUE if the status window is visible, or FALSE if it is not.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSHOWIMEUI">
            <summary>
                Sets whether the IME status window is visible or not on a per-user basis. The uiParam parameter specifies TRUE for
                on or FALSE for off.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSESPEED">
            <summary>
                Retrieves the current mouse speed. The mouse speed determines how far the pointer will move based on the distance
                the mouse moves.
                The pvParam parameter must point to an integer that receives a value which ranges between 1 (slowest) and 20
                (fastest).
                A value of 10 is the default. The value can be set by an end user using the mouse control panel application or
                by an application using SPI_SETMOUSESPEED.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSESPEED">
            <summary>
                Sets the current mouse speed. The pvParam parameter is an integer between 1 (slowest) and 20 (fastest). A value of
                10 is the default.
                This value is typically set using the mouse control panel application.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSCREENSAVERRUNNING">
            <summary>
                Determines whether a screen saver is currently running on the window station of the calling process.
                The pvParam parameter must point to a BOOL variable that receives TRUE if a screen saver is currently running, or
                FALSE otherwise.
                Note that only the interactive window station, "WinSta0", can have a screen saver running.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETDESKWALLPAPER">
            <summary>
                Retrieves the full path of the bitmap file for the desktop wallpaper. The pvParam parameter must point to a buffer
                that receives a null-terminated path string. Set the uiParam parameter to the size, in characters, of the pvParam
                buffer. The returned string will not exceed MAX_PATH characters. If there is no desktop wallpaper, the returned
                string is empty.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETACTIVEWINDOWTRACKING">
            <summary>
                Determines whether active window tracking (activating the window the mouse is on) is on or off. The pvParam
                parameter must point
                to a BOOL variable that receives TRUE for on, or FALSE for off.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETACTIVEWINDOWTRACKING">
            <summary>
                Sets active window tracking (activating the window the mouse is on) either on or off. Set pvParam to TRUE for on or
                FALSE for off.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMENUANIMATION">
            <summary>
                Determines whether the menu animation feature is enabled. This master switch must be on to enable menu animation
                effects.
                The pvParam parameter must point to a BOOL variable that receives TRUE if animation is enabled and FALSE if it is
                disabled.
                If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMENUANIMATION">
            <summary>
                Enables or disables menu animation. This master switch must be on for any menu animation to occur.
                The pvParam parameter is a BOOL variable; set pvParam to TRUE to enable animation and FALSE to disable animation.
                If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETCOMBOBOXANIMATION">
            <summary>
                Determines whether the slide-open effect for combo boxes is enabled. The pvParam parameter must point to a BOOL
                variable
                that receives TRUE for enabled, or FALSE for disabled.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETCOMBOBOXANIMATION">
            <summary>
                Enables or disables the slide-open effect for combo boxes. Set the pvParam parameter to TRUE to enable the gradient
                effect,
                or FALSE to disable it.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETLISTBOXSMOOTHSCROLLING">
            <summary>
                Determines whether the smooth-scrolling effect for list boxes is enabled. The pvParam parameter must point to a
                BOOL variable
                that receives TRUE for enabled, or FALSE for disabled.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETLISTBOXSMOOTHSCROLLING">
            <summary>
                Enables or disables the smooth-scrolling effect for list boxes. Set the pvParam parameter to TRUE to enable the
                smooth-scrolling effect,
                or FALSE to disable it.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETGRADIENTCAPTIONS">
            <summary>
                Determines whether the gradient effect for window title bars is enabled. The pvParam parameter must point to a BOOL
                variable
                that receives TRUE for enabled, or FALSE for disabled. For more information about the gradient effect, see the
                GetSysColor function.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETGRADIENTCAPTIONS">
            <summary>
                Enables or disables the gradient effect for window title bars. Set the pvParam parameter to TRUE to enable it, or
                FALSE to disable it.
                The gradient effect is possible only if the system has a color depth of more than 256 colors. For more information
                about
                the gradient effect, see the GetSysColor function.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETKEYBOARDCUES">
            <summary>
                Determines whether menu access keys are always underlined. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if menu access keys are always underlined, and FALSE if they are underlined only when the menu is activated by the
                keyboard.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETKEYBOARDCUES">
            <summary>
                Sets the underlining of menu access key letters. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to
                always underline menu
                access keys, or FALSE to underline menu access keys only when the menu is activated from the keyboard.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMENUUNDERLINES">
            <summary>
                Same as SPI_GETKEYBOARDCUES.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMENUUNDERLINES">
            <summary>
                Same as SPI_SETKEYBOARDCUES.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETACTIVEWNDTRKZORDER">
            <summary>
                Determines whether windows activated through active window tracking will be brought to the top. The pvParam
                parameter must point
                to a BOOL variable that receives TRUE for on, or FALSE for off.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETACTIVEWNDTRKZORDER">
            <summary>
                Determines whether or not windows activated through active window tracking should be brought to the top. Set
                pvParam to TRUE
                for on or FALSE for off.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETHOTTRACKING">
            <summary>
                Determines whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled. The
                pvParam parameter
                must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled.
                Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. You can query this
                value to decide
                whether to use hot tracking in the user interface of your application.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETHOTTRACKING">
            <summary>
                Enables or disables hot tracking of user-interface elements such as menu names on menu bars. Set the pvParam
                parameter to TRUE
                to enable it, or FALSE to disable it.
                Hot-tracking means that when the cursor moves over an item, it is highlighted but not selected.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMENUFADE">
            <summary>
                Determines whether menu fade animation is enabled. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                when fade animation is enabled and FALSE when it is disabled. If fade animation is disabled, menus use slide
                animation.
                This flag is ignored unless menu animation is enabled, which you can do using the SPI_SETMENUANIMATION flag.
                For more information, see AnimateWindow.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMENUFADE">
            <summary>
                Enables or disables menu fade animation. Set pvParam to TRUE to enable the menu fade effect or FALSE to disable it.
                If fade animation is disabled, menus use slide animation. he The menu fade effect is possible only if the system
                has a color depth of more than 256 colors. This flag is ignored unless SPI_MENUANIMATION is also set. For more
                information,
                see AnimateWindow.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETSELECTIONFADE">
            <summary>
                Determines whether the selection fade effect is enabled. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if enabled or FALSE if disabled.
                The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading
                out
                after the menu is dismissed.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETSELECTIONFADE">
            <summary>
                Set pvParam to TRUE to enable the selection fade effect or FALSE to disable it.
                The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading
                out
                after the menu is dismissed. The selection fade effect is possible only if the system has a color depth of more
                than 256 colors.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETTOOLTIPANIMATION">
            <summary>
                Determines whether ToolTip animation is enabled. The pvParam parameter must point to a BOOL variable that receives
                TRUE
                if enabled or FALSE if disabled. If ToolTip animation is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTips use
                fade or slide animation.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETTOOLTIPANIMATION">
            <summary>
                Set pvParam to TRUE to enable ToolTip animation or FALSE to disable it. If enabled, you can use SPI_SETTOOLTIPFADE
                to specify fade or slide animation.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETTOOLTIPFADE">
            <summary>
                If SPI_SETTOOLTIPANIMATION is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTip animation uses a fade effect or
                a slide effect.
                The pvParam parameter must point to a BOOL variable that receives TRUE for fade animation or FALSE for slide
                animation.
                For more information on slide and fade effects, see AnimateWindow.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETTOOLTIPFADE">
            <summary>
                If the SPI_SETTOOLTIPANIMATION flag is enabled, use SPI_SETTOOLTIPFADE to indicate whether ToolTip animation uses a
                fade effect
                or a slide effect. Set pvParam to TRUE for fade animation or FALSE for slide animation. The tooltip fade effect is
                possible only
                if the system has a color depth of more than 256 colors. For more information on the slide and fade effects,
                see the AnimateWindow function.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETCURSORSHADOW">
            <summary>
                Determines whether the cursor has a shadow around it. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if the shadow is enabled, FALSE if it is disabled. This effect appears only if the system has a color depth of more
                than 256 colors.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETCURSORSHADOW">
            <summary>
                Enables or disables a shadow around the cursor. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to
                enable the shadow
                or FALSE to disable the shadow. This effect appears only if the system has a color depth of more than 256 colors.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSESONAR">
            <summary>
                Retrieves the state of the Mouse Sonar feature. The pvParam parameter must point to a BOOL variable that receives
                TRUE
                if enabled or FALSE otherwise. For more information, see About Mouse Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSESONAR">
            <summary>
                Turns the Sonar accessibility feature on or off. This feature briefly shows several concentric circles around the
                mouse pointer when the user presses and releases the CTRL key. The pvParam parameter specifies TRUE for on and FALSE for off.
                The  default is off.
                For more information, see About Mouse Input.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSECLICKLOCK">
            <summary>
                Retrieves the state of the Mouse ClickLock feature. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if enabled, or FALSE otherwise. For more information, see About Mouse Input.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSECLICKLOCK">
            <summary>
                Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse
                button
                when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The uiParam
                parameter specifies
                TRUE for on,
                or FALSE for off. The default is off. For more information, see Remarks and About Mouse Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSEVANISH">
            <summary>
                Retrieves the state of the Mouse Vanish feature. The pvParam parameter must point to a BOOL variable that receives
                TRUE
                if enabled or FALSE otherwise. For more information, see About Mouse Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSEVANISH">
            <summary>
                Turns the Vanish feature on or off. This feature hides the mouse pointer when the user types; the pointer reappears
                when the user moves the mouse. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off.
                For more information, see About Mouse Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFLATMENU">
            <summary>
                Determines whether native User menus have flat menu appearance. The pvParam parameter must point to a BOOL variable
                that returns TRUE if the flat menu appearance is set, or FALSE otherwise.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFLATMENU">
            <summary>
                Enables or disables flat menu appearance for native User menus. Set pvParam to TRUE to enable flat menu appearance
                or FALSE to disable it.
                When enabled, the menu bar uses COLOR_MENUBAR for the menubar background, COLOR_MENU for the menu-popup background,
                COLOR_MENUHILIGHT
                for the fill of the current menu selection, and COLOR_HILIGHT for the outline of the current menu selection.
                If disabled, menus are drawn using the same metrics and colors as in Windows 2000 and earlier.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETDROPSHADOW">
            <summary>
                Determines whether the drop shadow effect is enabled. The pvParam parameter must point to a BOOL variable that
                returns TRUE
                if enabled or FALSE if disabled.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETDROPSHADOW">
            <summary>
                Enables or disables the drop shadow effect. Set pvParam to TRUE to enable the drop shadow effect or FALSE to
                disable it.
                You must also have CS_DROPSHADOW in the window class style.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETBLOCKSENDINPUTRESETS">
            <summary>
                Retrieves a BOOL indicating whether an application can reset the screensaver's timer by calling the SendInput
                function
                to simulate keyboard or mouse input. The pvParam parameter must point to a BOOL variable that receives TRUE
                if the simulated input will be blocked, or FALSE otherwise.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETBLOCKSENDINPUTRESETS">
            <summary>
                Determines whether an application can reset the screensaver's timer by calling the SendInput function to simulate
                keyboard
                or mouse input. The uiParam parameter specifies TRUE if the screensaver will not be deactivated by simulated input,
                or FALSE if the screensaver will be deactivated by simulated input.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETUIEFFECTS">
            <summary>
                Determines whether UI effects are enabled or disabled. The pvParam parameter must point to a BOOL variable that
                receives TRUE
                if all UI effects are enabled, or FALSE if they are disabled.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETUIEFFECTS">
            <summary>
                Enables or disables UI effects. Set the pvParam parameter to TRUE to enable all UI effects or FALSE to disable all
                UI effects.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFOREGROUNDLOCKTIMEOUT">
            <summary>
                Retrieves the amount of time following user input, in milliseconds, during which the system will not allow
                applications
                to force themselves into the foreground. The pvParam parameter must point to a DWORD variable that receives the
                time.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFOREGROUNDLOCKTIMEOUT">
            <summary>
                Sets the amount of time following user input, in milliseconds, during which the system does not allow applications
                to force themselves into the foreground. Set pvParam to the new timeout value.
                The calling thread must be able to change the foreground window, otherwise the call fails.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETACTIVEWNDTRKTIMEOUT">
            <summary>
                Retrieves the active window tracking delay, in milliseconds. The pvParam parameter must point to a DWORD variable
                that receives the time.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETACTIVEWNDTRKTIMEOUT">
            <summary>
                Sets the active window tracking delay. Set pvParam to the number of milliseconds to delay before activating the
                window
                under the mouse pointer.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFOREGROUNDFLASHCOUNT">
            <summary>
                Retrieves the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch
                request.
                The pvParam parameter must point to a DWORD variable that receives the value.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFOREGROUNDFLASHCOUNT">
            <summary>
                Sets the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch
                request.
                Set pvParam to the number of times to flash.
                Windows NT, Windows 95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETCARETWIDTH">
            <summary>
                Retrieves the caret width in edit controls, in pixels. The pvParam parameter must point to a DWORD that receives
                this value.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETCARETWIDTH">
            <summary>
                Sets the caret width in edit controls. Set pvParam to the desired width, in pixels. The default and minimum value
                is 1.
                Windows NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETMOUSECLICKLOCKTIME">
            <summary>
                Retrieves the time delay before the primary mouse button is locked. The pvParam parameter must point to DWORD that
                receives
                the time delay. This is only enabled if SPI_SETMOUSECLICKLOCK is set to TRUE. For more information, see About Mouse
                Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETMOUSECLICKLOCKTIME">
            <summary>
                Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse
                button
                when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The uiParam
                parameter
                specifies TRUE for on, or FALSE for off. The default is off. For more information, see Remarks and About Mouse
                Input on MSDN.
                Windows 2000/NT, Windows 98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFONTSMOOTHINGTYPE">
            <summary>
                Retrieves the type of font smoothing. The pvParam parameter must point to a UINT that receives the information.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFONTSMOOTHINGTYPE">
            <summary>
                Sets the font smoothing type. The pvParam parameter points to a UINT that contains either FE_FONTSMOOTHINGSTANDARD,
                if standard anti-aliasing is used, or FE_FONTSMOOTHINGCLEARTYPE, if ClearType is used. The default is
                FE_FONTSMOOTHINGSTANDARD.
                When using this option, the fWinIni parameter must be set to SPIF_SENDWININICHANGE | SPIF_UPDATEINIFILE; otherwise,
                SystemParametersInfo fails.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFONTSMOOTHINGCONTRAST">
            <summary>
                Retrieves a contrast value that is used in ClearType™ smoothing. The pvParam parameter must point to a UINT
                that receives the information.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFONTSMOOTHINGCONTRAST">
            <summary>
                Sets the contrast value used in ClearType smoothing. The pvParam parameter points to a UINT that holds the contrast
                value.
                Valid contrast values are from 1000 to 2200. The default value is 1400.
                When using this option, the fWinIni parameter must be set to SPIF_SENDWININICHANGE | SPIF_UPDATEINIFILE; otherwise,
                SystemParametersInfo fails.
                SPI_SETFONTSMOOTHINGTYPE must also be set to FE_FONTSMOOTHINGCLEARTYPE.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFOCUSBORDERWIDTH">
            <summary>
                Retrieves the width, in pixels, of the left and right edges of the focus rectangle drawn with DrawFocusRect.
                The pvParam parameter must point to a UINT.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFOCUSBORDERWIDTH">
            <summary>
                Sets the height of the left and right edges of the focus rectangle drawn with DrawFocusRect to the value of the
                pvParam parameter.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFOCUSBORDERHEIGHT">
            <summary>
                Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect.
                The pvParam parameter must point to a UINT.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFOCUSBORDERHEIGHT">
            <summary>
                Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the
                pvParam parameter.
                Windows 2000/NT, Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_GETFONTSMOOTHINGORIENTATION">
            <summary>
                Not implemented.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoActions.SPI_SETFONTSMOOTHINGORIENTATION">
            <summary>
                Not implemented.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors">
            <summary>
                If a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the
                WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.
                This parameter can be zero if you do not want to update the user profile or broadcast the WM_SETTINGCHANGE message,
                or it can be one or more of the following values.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors.None">
            <summary>
                Do nothing
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors.UpdateIniFile">
            <summary>Writes the new system-wide parameter setting to the user profile.</summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors.SendChange">
            <summary>Broadcasts the WM_SETTINGCHANGE message after updating the user profile.</summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors.SendWinIniChange">
            <summary>Same as SPIF_SENDCHANGE.</summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes">
            <summary>
                The following are the title bar elements represented in the arrays.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.TitleBar">
            <summary>
                Index for the titlebar
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.Reserved">
            <summary>
                Not used
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.MinimizeButton">
            <summary>
                Index for the minimize button
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.MaximizeButton">
            <summary>
                Index for the maximize button
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.HelpButton">
            <summary>
                Index for the help button
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.TitleBarInfoIndexes.CloseButton">
            <summary>
                Index for the close button
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.WindowDisplayAffinity">
            <summary>
                GetWindowsDisplayAffinity Enum values are described here: https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowdisplayaffinity
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowDisplayAffinity.None">
            <summary>
            Non affinity.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowDisplayAffinity.Monitor">
            <summary>
            Enable window contents to be displayed on a monitor.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.WindowLongIndex">
            <summary>
                Get/Set WindowLong Enum See: http://msdn.microsoft.com/en-us/library/ms633591.aspx
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_EXSTYLE">
            <summary>
                Sets a new extended window style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_HINSTANCE">
            <summary>
                Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_ID">
            <summary>
                Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_STYLE">
            <summary>
                Sets a new window style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_USERDATA">
            <summary>
                Sets the user data associated with the window.
                This data is intended for use by the application that created the window.
                Its value is initially zero.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowLongIndex.GWL_WNDPROC">
            <summary>
                Sets a new address for the window procedure.
                You cannot change this attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.WindowPlacementFlags">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632611(v=vs.85).aspx">WINDOWPLACEMENT structure</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPlacementFlags.None">
            <summary>
            When no flags are used
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPlacementFlags.SetMinPosition">
            <summary>
                The coordinates of the minimized window may be specified.
                This flag must be specified if the coordinates are set in the ptMinPosition member.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPlacementFlags.AsyncWindowPlacement">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input queues, the system posts
                the request to the thread that owns the window.
                This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPlacementFlags.RestoreToMaximized">
            <summary>
                The restored window will be maximized, regardless of whether it was maximized before it was minimized.
                This setting is only valid the next time the window is restored.
                It does not change the default restoration behavior.
                This flag is only valid when the SW_SHOWMINIMIZED value is specified for the showCmd member.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.WindowPos">
            <summary>
                See <a href="http://msdn.microsoft.com/en-us/library/ms633545.aspx">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_ASYNCWINDOWPOS">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input queues, the system posts
                the request to the thread that owns the window. This prevents the calling thread from blocking its execution while
                other threads process the request.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_DEFERERASE">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_DRAWFRAME">
            <summary>
                Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_FRAMECHANGED">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if
                the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's
                size is being changed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_HIDEWINDOW">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOACTIVATE">
            <summary>
                Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the
                topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOCOPYBITS">
            <summary>
                Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client
                area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOMOVE">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOOWNERZORDER">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOREDRAW">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area,
                the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a
                result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any
                parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOREPOSITION">
            <summary>
                Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOSENDCHANGING">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOSIZE">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_NOZORDER">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowPos.SWP_SHOWWINDOW">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Enums.WindowStyleFlags">
            <summary>
                The following are the window styles. After the window has been created, these styles cannot be modified, except as
                noted.
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632600(v=vs.85).aspx">Window Styles</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_OVERLAPPED">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_POPUP">
            <summary>
                The windows is a pop-up window. This style cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_CHILD">
            <summary>
                The window is a child window. A window with this style cannot have a menu bar.
                This style cannot be used with the WS_POPUP style.
                Alias WS_CHILDWINDOW: Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_MINIMIZE">
            <summary>
                The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_VISIBLE">
            <summary>
                The window is initially visible.
                This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_DISABLED">
            <summary>
                The window is initially disabled. A disabled window cannot receive input from the user. To change this after a
                window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_CLIPSIBLINGS">
            <summary>
                Clips child windows relative to each other;
                that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other
                overlapping child windows out of the region of the child window to be updated.
                If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area
                of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_CLIPCHILDREN">
            <summary>
                Excludes the area occupied by child windows when drawing occurs within the parent window.
                This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_MAXIMIZE">
            <summary>
                The window is initially maximized.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_BORDER">
            <summary>
                The window has a thin-line border.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_DLGFRAME">
            <summary>
                The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title
                bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_VSCROLL">
            <summary>
                The window has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_HSCROLL">
            <summary>
                The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_SYSMENU">
            <summary>
                The window has a window menu on its title bar.
                The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_THICKFRAME">
            <summary>
                The window has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_MINIMIZEBOX">
            <summary>
                The window has a minimize button
                Cannot be combined with the WS_EX_CONTEXTHELP style.
                The WS_SYSMENU style must also be specified.
                Value is the same as WS_GROUP, due to a different context
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_GROUP">
            <summary>
                The window is the first control of a group of controls.
                The group consists of this first control and all controls defined after it, up to the next control with the
                WS_GROUP style.
                The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group.
                The user can subsequently change the keyboard focus from one control in the group to the next control in the group
                by using the direction keys.
                You can turn this style on and off to change dialog box navigation.
                To change this style after a window has been created, use the SetWindowLong function.
                Value is the same as WS_MINIMIZEBOX, due to a different context
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_MAXIMIZEBOX">
            <summary>
                The window has a maximize button.
                Cannot be combined with the WS_EX_CONTEXTHELP style.
                The WS_SYSMENU style must also be specified.
                Value is the same as WS_TABSTOP, due to a different context
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_TABSTOP">
            <summary>
                The window is a control that can receive the keyboard focus when the user presses the TAB key.
                Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.
                You can turn this style on and off to change dialog box navigation.
                To change this style after a window has been created, use the SetWindowLong function.
                For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the
                IsDialogMessage function.
                Value is the same as WS_MAXIMIZEBOX, due to a different context
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_CAPTION">
            <summary>
                The window has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_OVERLAPPEDWINDOW">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar and a border.
                Same as the WS_OVERLAPPED style.
            </summary>
            <summary>
                The window has a sizing border. Same as the WS_THICKFRAME style.
            </summary>
            <summary>
                The window is an overlapped window. Same as the WS_OVERLAPPEDWINDOW style.
            </summary>
            <summary>
                The window is an overlapped window. Same as the WS_TILEDWINDOW style.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Enums.WindowStyleFlags.WS_POPUPWINDOW">
            <summary>
                The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu
                visible.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.SafeHandles.SafeCurrentInputDesktopHandle">
            <summary>
                A SafeHandle class implementation for the current input desktop
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.SafeHandles.SafeCurrentInputDesktopHandle.#ctor">
            <summary>
                Default constructor, this opens the input destop with GENERIC_ALL
                This is needed to support marshalling!!
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.SafeHandles.SafeCurrentInputDesktopHandle.ReleaseHandle">
            <summary>
                Close the desktop
            </summary>
            <returns>true if this succeeded</returns>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.AnimationInfo">
            <summary>
                Describes the animation effects associated with user actions. This structure is used with the SystemParametersInfo
                function when the SPI_GETANIMATION or SPI_SETANIMATION action value is specified.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.AnimationInfo.Create(System.Boolean)">
            <summary>
                Factory method to create AnimationInfo
            </summary>
            <param name="enableAnimations"></param>
            <returns></returns>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.CursorInfo">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms648381(v=vs.85).aspx"></a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.CursorInfo._cbSize">
            <summary>
            Size of the struct
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.CursorInfo.Flags">
            <summary>
            The cursor state, as CursorInfoFlags
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.CursorInfo.CursorHandle">
            <summary>
            Handle (IntPtr) to the Cursor
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.CursorInfo.Location">
            <summary>
            A structure that receives the screen coordinates of the cursor.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.CursorInfo.Create">
            <summary>
            Factory for the structure
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.MonitorInfoEx">
            <summary>
                The MONITORINFOEX structure contains information about a display monitor.
                The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.
                The MONITORINFOEX structure is a superset of the MONITORINFO structure.
                The MONITORINFOEX structure adds a string member to contain a name for the display monitor.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.MonitorInfoEx._cbSize">
            <summary>
                The size, in bytes, of the structure. Set this member to sizeof(MONITORINFOEX) (72) before calling the
                GetMonitorInfo function.
                Doing so lets the function determine the type of structure you are passing to it.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.MonitorInfoEx.Monitor">
            <summary>
                A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates.
                Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative
                values.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.MonitorInfoEx.WorkArea">
            <summary>
                A RECT structure that specifies the work area rectangle of the display monitor that can be used by applications,
                expressed in virtual-screen coordinates. Windows uses this rectangle to maximize an application on the monitor.
                The rest of the area in rcMonitor contains system windows such as the task bar and side bars.
                Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative
                values.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.MonitorInfoEx.Flags">
            <summary>
                The attributes of the display monitor.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.MonitorInfoEx.DeviceName">
            <summary>
                A string that specifies the device name of the monitor being used.
                Most applications have no use for a display monitor name,
                and so can save some bytes by using a MONITORINFO structure.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.MonitorInfoEx.Create">
            <summary>
                Create a MonitorInfoEx with defaults
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.ScrollBarInfo">
            <summary>
                See<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787535(v=vs.85).aspx">SCROLLBARINFO structure</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.ScrollBarInfo._cbSize">
            <summary>
                Size of this struct
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollBarInfo.Bounds">
            <summary>
                Coordinates of the scroll bar as specified in a RECT structure.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollBarInfo.ThumbSize">
            <summary>
                Height or width of the thumb.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollBarInfo.ThumbBottom">
            <summary>
                Position of the bottom or right of the thumb.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollBarInfo.ThumbTop">
            <summary>
                Position of the top or left of the thumb.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollBarInfo.States">
            <summary>
                An array of object states.
            Each element indicates the state of a scroll bar component, the element is specified via the ScrollBarStateIndexes.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.ScrollBarInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.ScrollBarInfo.Create">
            <summary>
                Create a ScrollBarInfo struct
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.ScrollInfo">
            <summary>
                See <a href="http://pinvoke.net/default.aspx/Structures/SCROLLINFO.html">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.ScrollInfo._cbSize">
            <summary>
                Size of this struct
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.ScrollInfo._fMask">
            <summary>
                Mask specifying which values to get
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollInfo.Minimum">
            <summary>
                Minimum value to scroll to, e.g. the start
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollInfo.Maximum">
            <summary>
                Maximum value to scroll to, e.g. the end
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollInfo.PageSize">
            <summary>
                Size of a page
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollInfo.Position">
            <summary>
                Current position
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.ScrollInfo.TrackingPosition">
            <summary>
                Current tracking position
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.ScrollInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.ScrollInfo.Create(Dapplo.Windows.User32.Enums.ScrollInfoMask)">
            <summary>
                Create a ScrollInfo struct with the specified mask
            </summary>
            <param name="mask">ScrollInfoMask</param>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.TitleBarInfoEx">
            <summary>
                The structure for the TITLEBARINFOEX
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa969233(v=vs.85).aspx">TITLEBARINFOEX struct</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.TitleBarInfoEx._cbSize">
            <summary>
                The size of the structure, in bytes.
                The caller must set this member to sizeof(TITLEBARINFOEX).
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.TitleBarInfoEx.Bounds">
            <summary>
            The coordinates of the title bar. These coordinates include all title-bar elements except the window menu.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.TitleBarInfoEx.ElementState(Dapplo.Windows.User32.Enums.TitleBarInfoIndexes)">
            <summary>
            Returns the ObjectState of the specified element
            </summary>
            <param name="titleBarInfoIndex">TitleBarInfoIndexes used to specify the element</param>
            <returns>ObjectStates</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.TitleBarInfoEx.ElementBounds(Dapplo.Windows.User32.Enums.TitleBarInfoIndexes)">
            <summary>
            Returns the Bounds of the specified element
            </summary>
            <param name="titleBarInfoIndex">TitleBarInfoIndexes used to specify the element</param>
            <returns>RECT</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.TitleBarInfoEx.Create">
            <summary>
                Factory method for a default TitleBarInfoEx.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.WindowInfo">
            <summary>
                The structure for the WINDOWINFO
                See <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632610.aspx">WINDOWINFO struct</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.WindowInfo._cbSize">
            <summary>
            The size of the structure, in bytes. The caller must set this member to sizeof(WINDOWINFO).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.WindowInfo._dwWindowStatus">
            <summary>
            The window status. If this member is WS_ACTIVECAPTION (0x0001), the window is active. Otherwise, this member is zero.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.WindowInfo._cxWindowBorders">
            <summary>
            The width of the window border, in pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.WindowInfo._cyWindowBorders">
            <summary>
            The height of the window border, in pixels.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.IsActive">
            <summary>
            Test if the window is active
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.Bounds">
            <summary>
            The coordinates of the window, or client if the Window is returned as empty.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.ClientBounds">
            <summary>
            The coordinates of the client area.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.Style">
            <summary>
            The window styles.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.ExtendedStyle">
            <summary>
            The extended window styles. 
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.BorderSize">
            <summary>
            The size of the border
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.CreatorVersion">
            <summary>
            The Windows version of the application that created the window.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowInfo.AtomWindowType">
            <summary>
            The window class atom.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.WindowInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.WindowInfo.Create">
            <summary>
                Factory method for a default WindowInfo.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.Structs.WindowPlacement">
            <summary>
                Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.Structs.WindowPlacement._cbSize">
            <summary>
                The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
                <para>
                    GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
                </para>
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowPlacement.Flags">
            <summary>
                Specifies flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowPlacement.ShowCmd">
            <summary>
                The current show state of the window.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowPlacement.MinPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowPlacement.MaxPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.User32.Structs.WindowPlacement.NormalPosition">
            <summary>
                The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.WindowPlacement.Create">
            <summary>
                Gets the default (empty) value.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.Structs.WindowPlacement.ToString">
            <inheritdoc />
        </member>
        <member name="T:Dapplo.Windows.User32.TypeConverters.WindowPlacementTypeConverter">
            <summary>
            This implements a TypeConverter for the WindowPlacement structur
            </summary>
        </member>
        <member name="M:Dapplo.Windows.User32.TypeConverters.WindowPlacementTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.TypeConverters.WindowPlacementTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.TypeConverters.WindowPlacementTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.User32.TypeConverters.WindowPlacementTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Dapplo.Windows.User32.User32Api">
            <summary>
                Native wrappers for the User32 DLL
            </summary>
        </member>
        <member name="F:Dapplo.Windows.User32.User32Api.User32">
            <summary>
            The DLL Name for the User32 library
            </summary>
        </member>
        <member name="T:Dapplo.Windows.User32.User32Api.EnumWindowsProc">
            <summary>
                Delegate description for the windows enumeration
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="lParam">IntPtr</param>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetCursorLocation">
            <summary>
                Retrieves the cursor location safely, accounting for DPI settings in Vista/Windows 7.
            </summary>
            <returns>
                NativePoint with cursor location, relative to the origin of the monitor setup
                (i.e. negative coordinates are possible in multi screen setups)
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetDisplayInfo(System.IntPtr,System.Int32)">
            <summary>
            Get the display info for the specified monitor handle
            </summary>
            <param name="monitorHandle">IntPtr</param>
            <param name="index"></param>
            <returns>DisplayInfo</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.EnumDisplays">
            <summary>
            Retrieve all available display infos
            </summary>
            <returns>IReadOnlyList of DisplayInfo</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.EnumThreadWindows(System.Int32)">
            <summary>
            This returns the list of window handles for the specified thread
            </summary>
            <param name="threadId">int</param>
            <returns>List of IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.CreateWin32Exception(System.String)">
            <summary>
                Helper method to create a Win32 exception with the windows message in it
            </summary>
            <param name="method">string with current method</param>
            <returns>Exception</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetClassLongWrapper(System.IntPtr,Dapplo.Windows.User32.Enums.ClassLongIndex)">
            <summary>
                Wrapper for the GetClassLong which decides if the system is 64-bit or not and calls the right one.
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="index">ClassLongIndex</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetClassname(System.IntPtr)">
            <summary>
                Retrieve the windows classname
            </summary>
            <param name="hWnd">IntPtr for the window</param>
            <returns>string</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetGuiResourcesGdiCount">
            <summary>
                Return the count of GDI objects.
            </summary>
            <returns>Return the count of GDI objects.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetGuiResourcesUserCount">
            <summary>
                Return the count of USER objects.
            </summary>
            <returns>Return the count of USER objects.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetText(System.IntPtr)">
            <summary>
                Retrieve the windows caption, also called Text
                Note: Do not call this from the same thread as the message pump
            </summary>
            <param name="hWnd">IntPtr for the window</param>
            <returns>string</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetTextFromWindow(System.IntPtr)">
            <summary>
                Get the text of a control, this is not the caption
            </summary>
            <param name="hWnd">IntPtr</param>
            <returns>string with the text</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetTitleBarInfoEx(System.IntPtr)">
            <summary>
                Get the titlebar info ex for the specified window
            </summary>
            <param name="hWnd">IntPtr with the window handle</param>
            <returns>TitleBarInfoEx</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowLongWrapper(System.IntPtr,Dapplo.Windows.User32.Enums.WindowLongIndex)">
            <summary>
                Wrapper for the GetWindowLong which decides if the system is 64-bit or not and calls the right one.
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="index">WindowLongIndex</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetWindowLongWrapper(System.IntPtr,Dapplo.Windows.User32.Enums.WindowLongIndex,System.IntPtr)">
            <summary>
                Wrapper for the SetWindowLong which decides if the system is 64-bit or not and calls the right one.
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="index">WindowLongIndex</param>
            <param name="styleFlags"></param>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.TrySendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.IntPtr,System.IntPtr@,System.IntPtr,System.UInt32)">
            <summary>
            Try to send a WindowsMessage, this will return if the target didn't respond in the specified timeout (300ms by default)
            </summary>
            <param name="hWnd">IntPtr window handle</param>
            <param name="message">WindowsMessages</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="result">out IntPtr</param>
            <param name="timeout">uint with optional number of milliseconds, default is 300</param>
            <returns>bool true if the SendMessage worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.TrySendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr,System.UInt32)">
            <summary>
            Try to send a WindowsMessage, this will return if the target didn't respond in the specified timeout (300ms by default)
            </summary>
            <param name="hWnd">IntPtr window handle</param>
            <param name="message">uint</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="result">out IntPtr</param>
            <param name="timeout">uint with optional number of milliseconds, default is 300</param>
            <returns>bool true if the SendMessage worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.TrySendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.UIntPtr@,System.IntPtr,System.UInt32)">
            <summary>
            Try to send a WindowsMessage, this will return if the target didn't respond in the specified timeout (300ms by default)
            </summary>
            <param name="hWnd">IntPtr window handle</param>
            <param name="message">uint</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="result">out UIntPtr</param>
            <param name="timeout">uint with optional number of milliseconds, default is 300</param>
            <returns>bool true if the SendMessage worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.IsWindowVisible(System.IntPtr)">
             <summary>
             Determines the visibility state of the specified window.
             </summary>
             <param name="hWnd">A handle to the window to be tested.</param>
             <returns>
             If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero.
             Because the return value specifies whether the window has the WS_VISIBLE style, it may be nonzero even if the window is totally obscured by other windows.
            
             Remarks:
             The visibility state of a window is indicated by the WS_VISIBLE style bit. When WS_VISIBLE is set, the window is displayed and subsequent drawing into it is displayed as long as the window has the WS_VISIBLE style.
             Any drawing to a window with the WS_VISIBLE style will not be displayed if the window is obscured by other windows or is clipped by its parent window.
             </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.IsWindow(System.IntPtr)">
            <summary>
            Determines whether the specified window handle identifies an existing window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>
            If the window handle identifies an existing window, the return value is true.
            If the window handle does not identify an existing window, the return value is false.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633522(v=vs.85).aspx">GetWindowThreadProcessId function</a>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="processId">A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.</param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowThreadProcessId(System.IntPtr,System.IntPtr)">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633522(v=vs.85).aspx">GetWindowThreadProcessId function</a>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="processId">A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.</param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.AttachThreadInput(System.Int32,System.Int32,System.Int32)">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-attachthreadinput">AttachThreadInput function</a>
            </summary>
            <param name="idAttach">int</param>
            <param name="idAttachTo">int</param>
            <param name="fAttach">int</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetParent(System.IntPtr)">
            <summary>
                Retrieves a handle to the specified window's parent or owner.
                To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hWnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>
                IntPtr handle to the parent window or IntPtr.Zero if none
                If the window is a child window, the return value is a handle to the parent window. If the window is a top-level
                window with the WS_POPUP style, the return value is a handle to the owner window.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633541(v=vs.85).aspx">SetParent function</a>
                Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">IntPtr</param>
            <param name="hWndNewParent">IntPtr</param>
            <returns>
                If the function succeeds, the return value is a handle to the previous parent window.
                If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindow(System.IntPtr,Dapplo.Windows.User32.Enums.GetWindowCommands)">
            <summary>
                Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633515(v=vs.85).aspx">GetWindow function</a>
            </summary>
            <param name="hWnd">
                IntPtr A handle to a window. The window handle retrieved is relative to this window, based on the
                value of the uCmd parameter.
            </param>
            <param name="getWindowCommand">
                GetWindowCommands The relationship between the specified window and the window whose
                handle is to be retrieved. See GetWindowCommands
            </param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.ShowWindow(System.IntPtr,Dapplo.Windows.User32.Enums.ShowWindowCommands)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633548(v=vs.85).aspx">ShowWindow function</a>
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="nCmdShow">
                ShowWindowCommands
                Controls how the window is to be shown.
                This parameter is ignored the first time an application calls ShowWindow, if the program that launched the
                application provides a STARTUPINFO structure.
                Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in
                its nCmdShow parameter.
                In subsequent calls, this parameter can be one of the following values.
            </param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetWindowText(System.IntPtr,System.String)">
            <summary>
                Get the caption of the window
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633546.aspx">SetWindowText function</a>
            </summary>
            <param name="hWnd">IntPtr with the window handle</param>
            <param name="caption">string with the new caption</param>
            <returns>int with the size of the caption</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowText(System.IntPtr,System.Char*,System.Int32)">
            <summary>
                Get the caption of the window
            </summary>
            <param name="hWnd">IntPtr with the window handle</param>
            <param name="lpString">char * to place the </param>
            <param name="capacity">size of the buffer</param>
            <returns>int with the size of the caption</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowTextLength(System.IntPtr)">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633521.aspx">GetWindowTextLength  function</a>
            Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application.
            </summary>
            <param name="hWnd">A handle to the window or control.</param>
            <returns>
            If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value may actually be greater than the length of the text. For more information, see the following Remarks section.
            If the window has no text, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetSysColor(Dapplo.Windows.User32.Enums.SysColorIndexes)">
            <summary>
            Retrieves the current color of the specified display element.
            Display elements are the parts of a window and the display that appear on the system display screen.
            </summary>
            <param name="nIndex">SysColorIndexes with the display element whose color is to be retrieved.</param>
            <returns>
            The function returns the red, green, blue (RGB) color value of the given element.
            If the nIndex parameter is out of range, the return value is zero.
            Because zero is also a valid RGB value, you cannot use GetSysColor to determine whether a system color is supported by the current platform.Instead, use the GetSysColorBrush function, which returns NULL if the color is not supported.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.BringWindowToTop(System.IntPtr)">
            <summary>
                Bring the specified window to the front
            </summary>
            <param name="hWnd">IntPtr specifying the hWnd</param>
            <returns>true if the call was successfull</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetForegroundWindow">
            <summary>
            Retrieves the hWnd for the window which is currently the foreground window
            </summary>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetDesktopWindow">
            <summary>
                Get the hWnd of the Desktop window
            </summary>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetForegroundWindow(System.IntPtr)">
            <summary>
                Set the current foreground window
            </summary>
            <param name="hWnd">IntPtr with the handle to the window</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetFocus(System.IntPtr)">
            <summary>
                Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.
            </summary>
            <param name="hWnd">
                A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes
                are ignored.
            </param>
            <returns>
                IntPtr
                If the function succeeds, the return value is the handle to the window that previously had the keyboard focus.
                If the hWnd parameter is invalid or the window is not attached to the calling thread's message queue, the return
                value is NULL.
                To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowPlacement(System.IntPtr,Dapplo.Windows.User32.Structs.WindowPlacement@)">
            <summary>
                Get the WindowPlacement for the specified window
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowPlacement">WindowPlacement</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetWindowPlacement(System.IntPtr,Dapplo.Windows.User32.Structs.WindowPlacement@)">
            <summary>
                Set the WindowPlacement for the specified window
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowPlacement">WindowPlacement</param>
            <returns>true if the call was sucessfull</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.IsIconic(System.IntPtr)">
            <summary>
                Return true if the specified window is minimized
            </summary>
            <param name="hWnd">IntPtr for the hWnd</param>
            <returns>true if minimized</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.IsZoomed(System.IntPtr)">
            <summary>
                Return true if the specified window is maximized
            </summary>
            <param name="hWnd">IntPtr for the hWnd</param>
            <returns>true if maximized</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetClassName(System.IntPtr,System.Char*,System.Int32)">
            <summary>
                Get the classname of the specified window
            </summary>
            <param name="hWnd">IntPtr with the hWnd</param>
            <param name="className">char * to place the classname into</param>
            <param name="nMaxCount">max size for the string builder length</param>
            <returns>nr of characters returned</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.PrintWindow(System.IntPtr,System.IntPtr,Dapplo.Windows.User32.Enums.PrintWindowFlags)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd162869(v=vs.85).aspx">PrintWindow function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="hDc">IntPtr</param>
            <param name="printWindowFlags">PrintWindowFlags</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,Dapplo.Windows.User32.Enums.SysCommands,System.IntPtr)">
            <summary>
                Used for the WM_VSCROLL and WM_HSCROLL windows messages
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowsMessage">WindowsMessages</param>
            <param name="sysCommand">SysCommands</param>
            <param name="lParam">IntPtr</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,Dapplo.Windows.User32.Enums.ScrollBarCommands,System.Int32)">
            <summary>
                Used for the WM_VSCROLL and WM_HSCROLL windows messages
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowsMessage">WindowsMessages</param>
            <param name="scrollBarCommand">ScrollBarCommands</param>
            <param name="lParam"></param>
            <returns>0</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
             Used for calls where the arguments are IntPtr
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowsMessage">WindowsMessages</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.Int32,System.Int32)">
            <summary>
                Used for calls where the arguments are int
            </summary>
            <param name="hWnd">IntPtr for the Window handle</param>
            <param name="windowsMessage">WindowsMessages</param>
            <param name="wParam">int</param>
            <param name="lParam">int</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.IntPtr,Dapplo.Windows.User32.Structs.TitleBarInfoEx@)">
            <summary>
                SendMessage for getting TitleBarInfoEx
            </summary>
            <param name="hWnd"></param>
            <param name="windowsMessage"></param>
            <param name="wParam"></param>
            <param name="lParam">TitleBarInfoEx</param>
            <returns>LResut which is an IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.Int32,System.Char*)">
            <summary>
                Used for WM_GETTEXT
            </summary>
            <param name="hWnd">IntPtr for the Window handle</param>
            <param name="windowsMessage"></param>
            <param name="wParam">int with the capacity of the string builder</param>
            <param name="lParam">char *</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessage(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.IntPtr,System.String)">
            <summary>
                Used for WM_SETTEXT or another message where a string needs to be send
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowsMessage">WindowsMessages</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">string</param>
            <returns>IntPtr, The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.MonitorFromWindow(System.IntPtr,Dapplo.Windows.User32.Enums.MonitorFrom)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145064(v=vs.85).aspx">
                    MonitorFromWindow
                    function
                </a>
                The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection
                with the bounding rectangle of a specified window.
            </summary>
            <param name="hWnd"></param>
            <param name="monitorFrom">MonitorFromFlags</param>
            <returns>IntPtr for the monitor</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.MonitorFromRect(Dapplo.Windows.Common.Structs.NativeRect@,Dapplo.Windows.User32.Enums.MonitorFrom)">
            <summary>
                The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection
                with a specified rectangle.
                see
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145063(v=vs.85).aspx">MonitorFromRect function</a>
            </summary>
            <param name="rect">A RECT structure that specifies the rectangle of interest in virtual-screen coordinates.</param>
            <param name="monitorFrom">MonitorFromRectFlags</param>
            <returns>HMONITOR handle</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowInfo(System.IntPtr,Dapplo.Windows.User32.Structs.WindowInfo@)">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633516(v=vs.85).aspx">GetWindowInfo</a>
                Retrieves information about the specified window.
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowInfo">WindowInfo (use WindowInfo.Create)</param>
            <returns>bool if false than get the last error</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.EnumWindows(Dapplo.Windows.User32.User32Api.EnumWindowsProc,System.IntPtr)">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633497(v=vs.85).aspx">here</a>
            </summary>
            <param name="enumFunc">EnumWindowsProc</param>
            <param name="param">An application-defined value to be passed to the callback function.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.EnumThreadWindows(System.Int32,Dapplo.Windows.User32.User32Api.EnumWindowsProc,System.IntPtr)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633495(v=vs.85).aspx">
                    EnumThreadWindows
                    function
                </a>
                Enumerates all non child windows associated with a thread by passing the handle to each window, in turn, to an
                application-defined callback function.
                EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE.
                To enumerate child windows of a particular window, use the EnumChildWindows function.
            </summary>
            <param name="threadId">The identifier of the thread whose windows are to be enumerated.</param>
            <param name="enumFunc">EnumWindowsProc</param>
            <param name="param">An application-defined value to be passed to the callback function.</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.EnumChildWindows(System.IntPtr,Dapplo.Windows.User32.User32Api.EnumWindowsProc,System.IntPtr)">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633497(v=vs.85).aspx">here</a>
            </summary>
            <param name="hWndParent">IntPtr with hWnd of parent window, if this is IntPtr.Zero this function behaves as EnumWindows</param>
            <param name="enumFunc">EnumWindowsProc</param>
            <param name="param">An application-defined value to be passed to the callback function.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetScrollInfo(System.IntPtr,Dapplo.Windows.User32.Enums.ScrollBarTypes,Dapplo.Windows.User32.Structs.ScrollInfo@)">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787583(v=vs.85).aspx">GetScrollInfo</a> for
                more information.
            </summary>
            <param name="hWnd">IntPtr with the window handle</param>
            <param name="scrollBar">ScrollBarTypes</param>
            <param name="scrollInfo">ScrollInfo ref</param>
            <returns>bool if it worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetScrollInfo(System.IntPtr,Dapplo.Windows.User32.Enums.ScrollBarTypes,Dapplo.Windows.User32.Structs.ScrollInfo@,System.Boolean)">
            <summary>
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787595(v=vs.85).aspx">SetScrollInfo</a> for
                more information.
            </summary>
            <param name="hWnd">IntPtr with the window handle</param>
            <param name="scrollBar">ScrollBarTypes</param>
            <param name="scrollInfo">ScrollInfo ref</param>
            <param name="redraw">bool to specify if a redraw should be made</param>
            <returns>int with the current position of the scroll box</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.ShowScrollBar(System.IntPtr,Dapplo.Windows.User32.Enums.ScrollBarTypes,System.Boolean)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787601(v=vs.85).aspx">ShowScrollBar function</a>
                for more information.
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="scrollBar">ScrollBarTypes</param>
            <param name="show">true to show, false to hide</param>
            <returns>
                If the function succeeds, the return value is nonzero.
                If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetScrollBarInfo(System.IntPtr,Dapplo.Windows.User32.Enums.ObjectIdentifiers,Dapplo.Windows.User32.Structs.ScrollBarInfo@)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb787581(v=vs.85).aspx">GetScrollBarInfo function</a>
                for more information.
            </summary>
            <param name="hWnd">
                Handle to a window associated with the scroll bar whose information is to be retrieved. If the
                idObject parameter is OBJID_CLIENT, hWnd is a handle to a scroll bar control. Otherwise, hWnd is a handle to a
                window created with WS_VSCROLL and/or WS_HSCROLL style.
            </param>
            <param name="idObject">
                Specifies the scroll bar object. Can be ObjectIdentifiers.Client,
                ObjectIdentifiers.HorizontalScrollbar, ObjectIdentifiers.VerticalScrollbar
            </param>
            <param name="scrollBarInfo">ScrollBarInfo ref</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetWindowDisplayAffinity(System.IntPtr,Dapplo.Windows.User32.Enums.WindowDisplayAffinity)">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowdisplayaffinity">>SetWindowDisplayAffinity function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowDisplayAffinity">WindowDisplayAffinity</param>
            <returns>bool true if it worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowDisplayAffinity(System.IntPtr,Dapplo.Windows.User32.Enums.WindowDisplayAffinity@)">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowdisplayaffinity">>SetWindowDisplayAffinity function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="windowDisplayAffinity">WindowDisplayAffinity out</param>
            <returns>bool true if it worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowRgn(System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd144950(v=vs.85).aspx">GetWindowRgn function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="hRgn">SafeHandle</param>
            <returns>RegionResults</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Dapplo.Windows.User32.Enums.WindowPos)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633545(v=vs.85).aspx">SetWindowPos</a>
            </summary>
            <param name="hWnd">IntPtr, a handle to the window.</param>
            <param name="hWndInsertAfter">IntPtr, a handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values. (see link)</param>
            <param name="x">int</param>
            <param name="y">int</param>
            <param name="cx">int</param>
            <param name="cy">int</param>
            <param name="uFlags">WindowPos</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetTopWindow(System.IntPtr)">
            <summary>
            Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633514(v=vs.85).aspx">GetTopWindow</a>
            </summary>
            <param name="hWnd">A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order.</param>
            <returns>If the function succeeds, the return value is a handle to the child window at the top of the Z order. If the specified window has no child windows, the return value is NULL. To get extended error information, use the GetLastError function.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetWindowDC(System.IntPtr)">
            <summary>
            The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area.
            GetWindowDC assigns default attributes to the window device context each time it retrieves the device context.Previous attributes are lost.
            See <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getwindowdc">GetWindowDC function</a>
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetWindowDC retrieves the DC for the entire screen.</param>
            <returns>If the function succeeds, the return value is a handle to a device context for the specified window.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd144871(v=vs.85).aspx">GetDC function</a>
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">IntPtr A handle to the window whose DC is to be released.</param>
            <param name="hDc">IntPtr A handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.FindWindow(System.String,System.String)">
            <summary>
            Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.
            To search child windows, beginning with a specified child window, use the FindWindowEx function.
            </summary>
            <param name="lpClassName">string</param>
            <param name="lpWindowName">string</param>
            <returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.
            </summary>
            <param name="hWndParent">
            IntPtr, A handle to the parent window whose child windows are to be searched.
            If hWndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.
            If hWndParent is HWND_MESSAGE, the function searches all message-only windows.
            </param>
            <param name="hWndChildAfter">
            IntPtr, a handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hWndParent, not just a descendant window.
            If hWndChildAfter is NULL, the search begins with the first child window of hWndParent.
            Note that if both hWndParent and hWndChildAfter are NULL, the function searches all top-level and message-only windows.
            </param>
            <param name="lpszClass">
            The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.
            If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.
            </param>
            <param name="lpszWindow">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <remarks>If the lpszWindow parameter is not NULL, FindWindowEx calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks section of GetWindowText.
            An application can call this function in the following way.
            FindWindowEx( NULL, NULL, MAKEINTATOM(0x8000), NULL );
            Note that 0x8000 is the atom for a menu class. When an application calls this function, the function checks whether a context menu is being displayed that the application created.</remarks>
            <returns>
            If the function succeeds, the return value is a handle to the window that has the specified class and window names.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetGuiResources(System.IntPtr,System.UInt32)">
            uiFlags: 0 - Count of GDI objects
            uiFlags: 1 - Count of USER objects
            - Win32 GDI objects (pens, brushes, fonts, palettes, regions, device contexts, bitmap headers)
            - Win32 USER objects:
            - 	WIN32 resources (accelerator tables, bitmap resources, dialog box templates, font resources, menu resources, raw data resources, string table entries, message table entries, cursors/icons)
            - Other USER objects (windows, menus)
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessageTimeout(System.IntPtr,Dapplo.Windows.Messages.Enumerations.WindowsMessages,System.IntPtr,System.IntPtr,Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags,System.UInt32,System.IntPtr@)">
            <summary>
            Sends the specified message to one or more windows, depending on the specified fuFlags this can handle issues with hanging message loops.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644952(v=vs.85).aspx">SendMessageTimeout function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="msg">WindowsMessages</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="fuFlags">SendMessageTimeoutFlags</param>
            <param name="uTimeout">uint The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
            <param name="lpdwResult">UIntPtr The result of the message processing. The value of this parameter depends on the message that is specified.</param>
            <returns>bool false if timeout true if the sendmessage returned</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessageTimeout(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags,System.UInt32,System.IntPtr@)">
            <summary>
            Sends the specified message to one or more windows, depending on the specified fuFlags this can handle issues with hanging message loops.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644952(v=vs.85).aspx">SendMessageTimeout function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="msg">uint</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="fuFlags">SendMessageTimeoutFlags</param>
            <param name="uTimeout">uint The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
            <param name="lpdwResult">IntPtr The result of the message processing. The value of this parameter depends on the message that is specified.</param>
            <returns>bool false if timeout true if the sendmessage returned</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SendMessageTimeout(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,Dapplo.Windows.User32.Enums.SendMessageTimeoutFlags,System.UInt32,System.UIntPtr@)">
            <summary>
            Sends the specified message to one or more windows, depending on the specified fuFlags this can handle issues with hanging message loops.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644952(v=vs.85).aspx">SendMessageTimeout function</a>
            </summary>
            <param name="hWnd">IntPtr</param>
            <param name="msg">uint</param>
            <param name="wParam">IntPtr</param>
            <param name="lParam">IntPtr</param>
            <param name="fuFlags">SendMessageTimeoutFlags</param>
            <param name="uTimeout">uint The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
            <param name="lpdwResult">UIntPtr The result of the message processing. The value of this parameter depends on the message that is specified.</param>
            <returns>bool false if timeout true if the sendmessage returned</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.MapWindowPoints(System.IntPtr,System.IntPtr,Dapplo.Windows.Common.Structs.NativePoint@,System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">IntPtr window handle for the from window</param>
            <param name="hWndTo">IntPtr window handle for the to window</param>
            <param name="lpPoints">A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.</param>
            <param name="cPoints">The number of POINT structures in the array pointed to by the lpPoints parameter.</param>
            <returns>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point.
            If the function fails, the return value is zero. Call SetLastError prior to calling this method to differentiate an error return value from a legitimate "0" return value.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.GetSystemMetrics(Dapplo.Windows.User32.Enums.SystemMetric)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724385(v=vs.85).aspx">GetSystemMetrics function</a>
            </summary>
            <param name="index">SystemMetric</param>
            <returns>int</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SetCapture(System.IntPtr)">
            <summary>
            Sets the mouse capture to the specified window belonging to the current thread.SetCapture captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the mouse.
            If the mouse cursor is over a window created by another thread, the system will direct mouse input to the specified window only if a mouse button is down.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646262(v=vs.85).aspx">SetCapture function</a>
            </summary>
            <param name="hWnd">A handle to the window in the current thread that is to capture the mouse.</param>
            <remarks>
            Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the cursor hot spot is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.
            When the window no longer requires all mouse input, the thread that created the window should call the ReleaseCapture function to release the mouse.
            This function cannot be used to capture mouse input meant for another process.
            When the mouse is captured, menu hotkeys and other keyboard accelerators do not work.
            </remarks>
            <returns>The return value is a handle to the window that had previously captured the mouse. If there is no such window, the return value is NULL.</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.ReleaseCapture">
            <summary>
            Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646261(v=vs.85).aspx">ReleaseCapture function</a>
            </summary>
            <returns>bool if it worked</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SystemParametersInfo(Dapplo.Windows.User32.Enums.SystemParametersInfoActions,System.UInt32,System.String,Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx">
                    SystemParametersInfo
                    function
                </a>
                For setting a string parameter
            </summary>
            <param name="uiAction">SystemParametersInfoActions</param>
            <param name="uiParam">
                A parameter whose usage and format depends on the system parameter being queried or set. For more
                information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify
                zero for this parameter.
            </param>
            <param name="pvParam">string</param>
            <param name="fWinIni">SystemParametersInfoBehaviors</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SystemParametersInfo(Dapplo.Windows.User32.Enums.SystemParametersInfoActions,System.UInt32,System.Text.StringBuilder,Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx">
                    SystemParametersInfo
                    function
                </a>
                For reading a string parameter
            </summary>
            <param name="uiAction">SystemParametersInfoActions</param>
            <param name="uiParam">
                A parameter whose usage and format depends on the system parameter being queried or set. For more
                information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify
                zero for this parameter.
            </param>
            <param name="pvParam">string</param>
            <param name="fWinIni">SystemParametersInfoBehaviors</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.SystemParametersInfo(Dapplo.Windows.User32.Enums.SystemParametersInfoActions,System.UInt32,Dapplo.Windows.User32.Structs.AnimationInfo@,Dapplo.Windows.User32.Enums.SystemParametersInfoBehaviors)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx">
                    SystemParametersInfo
                    function
                </a>
                For setting AnimationInfo
            </summary>
            <param name="uiAction">SystemParametersInfoActions</param>
            <param name="uiParam">
                A parameter whose usage and format depends on the system parameter being queried or set. For more
                information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify
                zero for this parameter.
            </param>
            <param name="animationInfo">AnimationInfo</param>
            <param name="fWinIni">SystemParametersInfoBehaviors</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Windows.User32.User32Api.LockWorkStation">
            <summary>
            Locks the workstation's display. Locking a workstation protects it from unauthorized use.
            </summary>
            <returns>Because the function executes asynchronously, true indicates that the operation has been initiated. If false, call GetLastError</returns>
        </member>
    </members>
</doc>
