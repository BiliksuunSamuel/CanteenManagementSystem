<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapplo.Windows.Messages</name>
    </assembly>
    <members>
        <member name="T:Dapplo.Windows.Messages.Enumerations.WindowsMessages">
            <summary>
                All possible windows messages
            See also <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644927(v=vs.85).aspx#system_defined">here</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CREATE">
            <summary>
            Sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632619.aspx">WM_CREATE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DESTROY">
            <summary>
            Sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632620(v=vs.85).aspx">WM_DESTROY message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_ENABLE">
            <summary>
            Sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632621(v=vs.85).aspx">WM_ENABLE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145213(v=vs.85).aspx">WM_PAINT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note: The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms725499(v=vs.85).aspx">M_WININICHANGE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_SETTINGCHANGE">
            <summary>
            A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed.
            Applications should send WM_SETTINGCHANGE to all top-level windows when they make changes to system parameters. (This message cannot be sent directly to a window.) To send the WM_SETTINGCHANGE message to all top-level windows, use the SendMessageTimeout function with the hWnd parameter set to HWND_BROADCAST.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms725497(v=vs.85).aspx">WM_SETTINGCHANGE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CONTEXTMENU">
            <summary>
            Notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            See <a href="https://docs.microsoft.com/en-us/windows/win32/menurc/wm-contextmenu">WM_CONTEXTMENU message</a>
            
            In case of a notify icon: 
            If a user selects a notify icon's shortcut menu with the keyboard, the Shell now sends the associated application a WM_CONTEXTMENU message. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DISPLAYCHANGE">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145210.aspx">WM_DISPLAYCHANGE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_GETICON">
            <summary>
            Sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632625.aspx">WM_GETICON message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCCREATE">
            <summary>
            Sent prior to the WM_CREATE message when a window is first created.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632635.aspx">WM_NCCREATE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCMOUSEMOVE">
            <summary>
            Posted to a window when the cursor is moved within the nonclient area of the window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCLBUTTONDOWN">
            <summary>
            Posted when the user presses the left mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCLBUTTONUP">
            <summary>
            Posted when the user releases the left mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCRBUTTONDOWN">
            <summary>
            Posted when the user presses the right mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCRBUTTONUP">
            <summary>
            Posted when the user releases the right mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCMBUTTONDOWN">
            <summary>
            Posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_NCMBUTTONUP">
            <summary>
            Posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window.
            This message is posted to the window that contains the cursor.
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_INPUT_DEVICE_CHANGE">
            <summary>
            Sent to the window that registered to receive raw input.
            A window receives this message through its WindowProc function.
            wParam - This parameter can be one of the following values:
            GIDC_ARRIVAL (1) : A new device has been added to the system.
            GIDC_REMOVAL (2) : A device has been removed from the system.
            lParam - The handle to the raw input device. Call GetRawInputDeviceInfo to get more information regarding the device.
            Return value
            If an application processes this message, it should return zero.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_INPUT">
            <summary>
            Sent to the window that is getting raw input.
            Raw input is available only when the application calls RegisterRawInputDevices with valid device specifications
            A window receives this message through its WindowProc function.
            wParam - The input code. This parameter can be one of the following values:
            RIM_INPUT (0) - Input occurred while the application was in the foreground. The application must call DefWindowProc so the system can perform cleanup.
            RIM_INPUTSINK (1) - Input occurred while the application was not in the foreground. The application must call DefWindowProc so the system can perform the cleanup.
            lParam - A handle to the RAWINPUT structure that contains the raw input from the device.
            Return value
            If an application processes this message, it should return zero.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_MOUSEFIRST">
            <summary>
            Defines the start of the mouse related messages
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_MOUSEMOVE">
             <summary>
             Posted to a window when the cursor moves.
             If the mouse is not captured, the message is posted to the window that contains the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mousemove">WM_MOUSEMOVE message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_LBUTTONDOWN">
            <summary>
            Posted when the user presses the left mouse button while the cursor is in the client area of a window.
            If the mouse is not captured, the message is posted to the window beneath the cursor.
            Otherwise, the message is posted to the window that has captured the mouse.
            
            See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondown">WM_LBUTTONDOWN message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_LBUTTONUP">
             <summary>
             Posted when the user releases the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttonup">WM_LBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_LBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondblclk">WM_LBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_RBUTTONDOWN">
             <summary>
             Posted when the user presses the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttondown">WM_RBUTTONDOWN message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_RBUTTONUP">
             <summary>
             Posted when the user releases the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttonup">WM_RBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_RBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttondblclk">WM_RBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_MBUTTONDOWN">
             <summary>
             Posted when the user presses the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttondown">WM_MBUTTONDOWN message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_MBUTTONUP">
             <summary>
             Posted when the user releases the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttonup">WM_MBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_MBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttondblclk">WM_MBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DEVICECHANGE">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/devio/wm-devicechange">WM_DEVICECHANGE message</a>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            wParam - The event that has occurred (DeviceChangeEvent)
            lParam - A pointer to a structure that contains event-specific data. Its format depends on the value of the wParam parameter. For more information, refer to the documentation for each event
            
            Return TRUE to grant the request, return BROADCAST_QUERY_DENY to deny the request.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DPICHANGED">
            <summary>
            Sent when the effective dots per inch (dpi) for a window has changed. The DPI is the scale factor for a window. There are multiple events that can cause the DPI to change. The following list indicates the possible causes for the change in DPI.
            * The window is moved to a new monitor that has a different DPI.
            * The DPI of the monitor hosting the window changes.
            The current DPI for a window always equals the last DPI sent by WM_DPICHANGED.
            This is the scale factor that the window should be scaling to for threads that are aware of DPI changes.
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn312083.aspx">WM_DPICHANGED message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DPICHANGED_BEFOREPARENT">
            <summary>
            For Per Monitor v2 top-level windows, this message is sent to all HWNDs in the child HWDN tree of the window that is undergoing a DPI change.
            This message occurs before the top-level window receives WM_DPICHANGED, and traverses the child tree from the bottom up.
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt807678.aspx">WM_DPICHANGED_BEFOREPARENT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DPICHANGED_AFTERPARENT">
            <summary>
                For Per Monitor v2 top-level windows, this message is sent to all HWNDs in the child HWDN tree of the window that is undergoing a DPI change.
                This message occurs after the top-level window receives WM_DPICHANGED, and traverses the child tree from the top down.
                See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt807677.aspx">WM_DPICHANGED_AFTERPARENT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_GETDPISCALEDSIZE">
             <summary>
                 This message tells the operating system that the window will be sized to dimensions other than the default.
                 This message is sent to top-level windows with a DPI_AWARENESS_CONTEXT of Per Monitor v2 before a WM_DPICHANGED message is sent, and allows the window to compute its desired size for the pending DPI change.
                 As linear DPI scaling is the default behavior, this is only useful in scenarios where the window wants to scale non-linearly.
                 If the application responds to this message, the resulting size will be the candidate rectangle send to WM_DPICHANGED.
                 Use this message to alter the size of the rect that is provided with WM_DPICHANGED.
            
                 wParam
                 The WPARAM contains a DPI value. The scaled window size that the application would set needs to be computed as if the window were to switch to this DPI.
             
                 lParam
                 The LPARAM is an in/out pointer to a SIZE struct. The _In_ value in the LPARAM is the pending size of the window after a user-initiated move or a call to SetWindowPos. If the window is being resized, this size is not necessarily the same as the window's current size at the time this message is received.
             
                 The _Out_ value in the LPARAM should be written to by the application to specify the desired scaled window size corresponding to the provided DPI value in the WPARAM.
            
                 The function returns a BOOL. Returning TRUE indicates that a new size has been computed. Returning FALSE indicates that the message will not be handled, and the default linear DPI scaling will apply to the window.
            
                 Remarks:
                 This message is only sent to top-level windows which have a DPI awareness context of Per Monitor v2.
                 This event is necessary to facilitate graceful non-linear scaling, and ensures that the windows's position remains constant in relationship to the cursor and when moving back and forth across monitors.
                  There is no specific default handling of this message in DefWindowProc. As for all messages it does not explicitly handle, DefWindowProc will return zero for this message. As noted above, this return tells the system to use the default linear behavior.
                 See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt807679.aspx">WM_GETDPISCALEDSIZE message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649023.aspx">WM_CUT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649022.aspx">WM_COPY message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649028.aspx">WM_PASTE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649020.aspx">WM_CLEAR message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb761693.aspx">WM_UNDO message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_RENDERFORMAT">
            <summary>
            Sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649030.aspx">WM_RENDERFORMAT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_RENDERALLFORMATS">
            <summary>
            Sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649029.aspx">WM_RENDERALLFORMATS message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DESTROYCLIPBOARD">
             <summary>
             Sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            A window receives this message through its WindowProc function.
             <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649024.aspx">WM_DESTROYCLIPBOARD message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_DRAWCLIPBOARD">
            <summary>
            Sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            A window receives this message through its WindowProc function.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649025.aspx">WM_DRAWCLIPBOARD message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_PAINTCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649027.aspx">WM_PAINTCLIPBOARD message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_VSCROLLCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649032.aspx">WM_VSCROLLCLIPBOARD message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_SIZECLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649031.aspx">WM_SIZECLIPBOARD message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_ASKCBFORMATNAME">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            A window receives this message through its WindowProc function.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649018.aspx">WM_ASKCBFORMATNAME message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CHANGECBCHAIN">
            <summary>
            Sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            A window receives this message through its WindowProc function.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649019.aspx">WM_CHANGECBCHAIN message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_HSCROLLCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649026.aspx">WM_HSCROLLCLIPBOARD message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_PRINT">
             <summary>
             The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            A window receives this message through its WindowProc function.
             <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145216.aspx">WM_PRINT message</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            Unlike WM_PRINT, WM_PRINTCLIENT is not processed by DefWindowProc. A window should process the WM_PRINTCLIENT message through an application-defined WindowProc function for it to be used properly.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145217.aspx">WM_PRINTCLIENT message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_APPCOMMAND">
            <summary>
            Notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646275.aspx">WM_APPCOMMAND message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_CLIPBOARDUPDATE">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649021.aspx">WM_CLIPBOARDUPDATE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.MM_JOY1MOVE">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd757352.aspx">MM_JOY1MOVE message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.MM_MCINOTIFY">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd757358.aspx">MM_MCINOTIFY message</a>
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_USER">
            <summary>
            Used to define private messages for use by private window classes, usually of the form WM_USER+x, where x is an integer value.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_SELECT">
             <summary>
             This message is only send when using NOTIFYICON_VERSION_4, the Shell now sends the associated application an NIN_SELECT notification.
             Send when a notify icon is activated with mouse or ENTER key.
             Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_KEYSELECT">
             <summary>
             This message is only send when using NOTIFYICON_VERSION_4, the Shell now sends the associated application an NIN_SELECT notification.
             Send when a notify icon is activated with SPACEBAR or ENTER key.
             Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_BALLOONSHOW">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            
            Sent when the balloon is shown (balloons are queued).
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_BALLOONHIDE">
             <summary>
             See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
             
             Sent when the balloon disappears. For example, when the icon is deleted.
             This message is not sent if the balloon is dismissed because of a timeout or if the user clicks the mouse.
            
             As of Windows 7, NIN_BALLOONHIDE is also sent when a notification with the NIIF_RESPECT_QUIET_TIME flag set attempts to display during quiet time (a user's first hour on a new computer).
             In that case, the balloon is never displayed at all.
             </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_BALLOONTIMEOUT">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            
            Sent when the balloon is dismissed because of a timeout.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_BALLOONUSERCLICK">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            
            Sent when the balloon is dismissed because the user clicked the mouse.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_POPUPOPEN">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            
            Sent when the user hovers the cursor over an icon to indicate that the richer pop-up UI should be used in place of a standard textual tooltip.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.NIN_POPUPCLOSE">
            <summary>
            See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
            
            Sent when a cursor no longer hovers over an icon to indicate that the rich pop-up UI should be closed.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_APP">
            <summary>
            The WM_APP constant is used to distinguish between message values that are reserved for use by the system and values that can be used by an application to send messages within a private window class. 
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.Enumerations.WindowsMessages.WM_APPLICATION_STRING">
            <summary>
            From this value to 
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Messages.MessageLoop">
            <summary>
            This is a simple message loop for console applications
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Messages.MessageLoop.MessageProc">
            <summary>
            This defines a delegate for handling windows messages
            </summary>
            <param name="message">Msg</param>
            <returns>true to continue</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.MessageLoop.GetMessage(Dapplo.Windows.Messages.Structs.Msg@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="lpMsg">A pointer to an MSG structure that receives message information from the thread's message queue.</param>
            <param name="hWnd">A handle to the window whose messages are to be retrieved. The window must belong to the current thread.
            
            If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose hWnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.
            
            If hWnd is -1, GetMessage retrieves only messages on the current thread's message queue whose hWnd value is NULL, that is, thread messages as posted by PostMessage (when the hWnd parameter is NULL) or PostThreadMessage.</param>
            <param name="wMsgFilterMin">The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.
            
            Use WM_INPUT here and in wMsgFilterMax to specify only the WM_INPUT messages.
            
            If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
            <param name="wMsgFilterMax">The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.
            
            Use WM_INPUT here and in wMsgFilterMin to specify only the WM_INPUT messages.
            
            If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.MessageLoop.ProcessMessages(Dapplo.Windows.Messages.MessageLoop.MessageProc,System.IntPtr,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            This processes messages, so a console application can use message based functionality, like low level keyboard events.
            The loop is very basic,
            </summary>
            <param name="handler">An optional function to process the message, return false to stop handling</param>
            <param name="hWnd">IntPtr with the window handle to get the messages for</param>
            <param name="wMsgFilterMin">The integer value of the lowest message value to be retrieved. Use WM_KEYFIRST (0x0100) to specify the first keyboard message or WM_MOUSEFIRST (0x0200) to specify the first mouse message.</param>
            <param name="wMsgFilterMax">The integer value of the highest message value to be retrieved. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST to specify the last mouse message.</param>
        </member>
        <member name="T:Dapplo.Windows.Messages.Structs.Msg">
            <summary>
            This structure represents the message information of Windows
            See <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagmsg">tagMSG structure</a>
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.Handle">
            <summary>
            Identifies the window whose window procedure receives the message.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.Message">
            <summary>
            The message identifier.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.wParam">
            <summary>
            Additional information about the message. The exact meaning depends on the value of the message member.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.lParam">
            <summary>
            Additional information about the message. The exact meaning depends on the value of the message member.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.Time">
            <summary>
            Time of the message
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.Structs.Msg.CursorPosition">
            <summary>
            The cursor position, in screen coordinates, when the message was posted.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Messages.WindowMessageInfo">
            <summary>
            Container for the windows messages
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WindowMessageInfo.Handle">
            <summary>
            IntPtr with the Handle of the window
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WindowMessageInfo.Message">
            <summary>
            WindowsMessages which is the actual message
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WindowMessageInfo.WordParam">
            <summary>
            IntPtr with the word-param
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WindowMessageInfo.LongParam">
            <summary>
            IntPtr with the long-param
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WindowMessageInfo.Create(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Factory method for the Window Message Info
            </summary>
            <param name="hWnd">IntPtr with the Handle of the window</param>
            <param name="msg">WindowsMessages which is the actual message</param>
            <param name="wParam">IntPtr with the word-param</param>
            <param name="lParam">IntPtr with the long-param</param>
            <returns>WindowMessageInfo</returns>
        </member>
        <member name="T:Dapplo.Windows.Messages.WindowsMessage">
            <summary>
            Helper class to work with windows messages
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WindowsMessage.GetWindowsMessage(System.UInt32)">
            <summary>
            This returns the name of a windows message, which was registered with RegisterWindowMessage 
            </summary>
            <param name="messageId">uint with the id which was returned by RegisterWindowMessage</param>
            <returns>string</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.WindowsMessage.RegisterWindowsMessage(System.String)">
            <summary>
            Register a windows message
            </summary>
            <param name="message">Windows message</param>
            <returns>uint with the message ID</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.WindowsMessage.GetClipboardFormatName(System.UInt32,System.Char*,System.Int32)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649040(v=vs.85).aspx">GetClipboardFormatName function</a>
                Retrieves from the clipboard the name of the specified registered format.
                The function copies the name to the specified buffer.
            </summary>
            <param name="format">int with the id of the format</param>
            <param name="lpszFormatName">Name of the format</param>
            <param name="cchMaxCount">Maximum size of the output</param>
            <returns>characters</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.WindowsMessage.RegisterWindowMessageW(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">string with the message</param>
            <returns>
            If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="T:Dapplo.Windows.Messages.WinProcFormsExtensions">
            <summary>
                A monitor for window messages
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcFormsExtensions.WinProcFormsMessages(System.Windows.Forms.Control)">
            <summary>
                Create an observable for the specified Control (Form)
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Messages.WinProcHandler">
            <summary>
                This can be used to handle WinProc messages, for instance when there is no running WinProc
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.WinProcHandler.Singleton">
            <summary>
                Hold the singleton
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Messages.WinProcHandler._hooks">
            <summary>
                Store hooks, so they can be removed
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcHandler.MessageHandlerWindow">
            <summary>
                Special HwndSource which is only there for handling messages, is top-level (no parent) to be able to handle ALL windows messages
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcHandler.Handle">
            <summary>
                The actual handle for the HwndSource
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcHandler.Instance">
            <summary>
                Singleton instance of the WinProcHandler
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcHandler.Subscribe(Dapplo.Windows.Messages.WinProcHandlerHook)">
            <summary>
                Subscribe a hook to handle messages
            </summary>
            <param name="winProcHandlerHook">WinProcHandlerHook</param>
            <returns>IDisposable which unsubscribes the hWndSourceHook when Dispose is called</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcHandler.Unsubscribe(Dapplo.Windows.Messages.WinProcHandlerHook)">
            <summary>
                Unsubscribe a hook
            </summary>
            <param name="winProcHandlerHook">WinProcHandlerHook</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcHandler.UnsubscribeAllHooks">
            <summary>
                Unsubscribe all current hooks
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcHandler.CreateMessageWindow(System.IntPtr,System.String)">
            <summary>
            Creates a HwndSource to catch windows message
            </summary>
            <param name="parent">IntPtr for the parent, this should usually not be set</param>
            <param name="title">Title of the window, a default is already set</param>
            <returns>HwndSource</returns>
        </member>
        <member name="T:Dapplo.Windows.Messages.WinProcHandlerHook">
            <summary>
            Wrapper of the HwndSourceHook for the WinProcHandler, to allow to specify a disposable
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcHandlerHook.Hook">
            <summary>
            The actual HwndSourceHook
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcHandlerHook.Disposable">
            <summary>
            Optional disposable which is called to make a cleanup possible
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcHandlerHook.#ctor(System.Windows.Interop.HwndSourceHook)">
            <summary>
            Default constructor, taking the needed HwndSourceHook
            </summary>
            <param name="hook">HwndSourceHook</param>
        </member>
        <member name="T:Dapplo.Windows.Messages.WinProcListener">
            <summary>
                This is a Listener for WinProc messages
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Messages.WinProcListener.IsDisposed">
            <summary>
            Is the WinProcListener already disposed?
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor for a window listener
            </summary>
            <param name="control">Control to listen to</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.AddHook(System.Windows.Interop.HwndSourceHook)">
            <summary>
                Adds an event handler
            </summary>
            <param name="hook">HwndSourceHook</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.OnHandleCreated(System.Object,System.EventArgs)">
            <summary>
                Listen for the control's window creation and then hook into it.
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.OnHandleDestroyed(System.Object,System.EventArgs)">
            <summary>
                Remove the handle
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.RemoveHook(System.Windows.Interop.HwndSourceHook)">
            <summary>
                Removes the event handlers that were added by AddHook
            </summary>
            <param name="hook">HwndSourceHook, The event handler to remove.</param>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcListener.ProcessMessage(System.Windows.Forms.Message)">
            <summary>
            Helper class to process the message
            </summary>
            <param name="message">Message</param>
            <returns>bool if the message was handled</returns>
        </member>
        <member name="T:Dapplo.Windows.Messages.WinProcWindowsExtensions">
            <summary>
                A monitor for window messages
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcWindowsExtensions.WinProcMessages(System.Windows.Window)">
            <summary>
                Create an observable for the specified window
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcWindowsExtensions.WinProcMessages(System.Windows.Interop.HwndSource)">
            <summary>
                Create an observable for the specified HwndSource
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcWindowsExtensions.WinProcMessages``1(System.Windows.Window,System.Windows.Interop.HwndSource,System.Func{System.IntPtr,``0},System.Action{``0})">
            <summary>
            Create an observable for the specified window or HwndSource
            </summary>
            <param name="window">Window</param>
            <param name="hWndSource">HwndSource</param>
            <param name="before">Func which does something as soon as the observable is created</param>
            <param name="disposeAction">Action which disposes something when the observable is disposed</param>
            <returns>IObservable</returns>
        </member>
        <member name="M:Dapplo.Windows.Messages.WinProcWindowsExtensions.ToHwndSource(System.Windows.Window)">
            <summary>
            Create a HwndSource for the specified Window
            </summary>
            <param name="window">Window</param>
            <returns>HwndSource</returns>
        </member>
    </members>
</doc>
