<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapplo.Windows.Icons</name>
    </assembly>
    <members>
        <member name="T:Dapplo.Windows.Icons.Enums.FolderType">
            <summary>
                Options to specify whether folders should be in the open or closed state.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.FolderType.Open">
            <summary>
                Specify open folder.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.FolderType.Closed">
            <summary>
                Specify closed folder.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Icons.Enums.IconSize">
            <summary>
                Options to specify the size of icons to return.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.IconSize.Large">
            <summary>
                Specify large icon - 32 pixels by 32 pixels.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.IconSize.Small">
            <summary>
                Specify small icon - 16 pixels by 16 pixels.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags">
            <summary>
            The flags that specify the file information to retrieve when calling SHGetFileInfo.
            This parameter can be a combination of the following values. 
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.Icon">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list.
            The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.DisplayName">
            <summary>
            Retrieve the display name for the file, which is the name as it appears in Windows Explorer.
            The name is copied to the szDisplayName member of the structure specified in psfi.
            The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.
            Note that the display name can be affected by settings such as whether extensions are shown.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.TypeName">
            <summary>
            Retrieve the string that describes the file's type.
            The string is copied to the szTypeName member of the structure specified in psfi
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.Attributes">
            <summary>
            Retrieve the item attributes.
            The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter.
            These are the same attributes that are obtained from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.IconLocation">
            <summary>
            Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler.
            Also retrieve the icon index within that file.
            The name of the file containing the icon is copied to the szDisplayName member of the structure specified by psfi.
            The icon's index is copied to that structure's iIcon member.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.ExeType">
            <summary>
            Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value.
            This flag cannot be specified with any other flags.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.SysIconIndex">
            <summary>
            Retrieve the index of a system image list icon.
            If successful, the index is copied to the iIcon member of psfi.
            The return value is a handle to the system image list.
            Only those images whose indices are successfully copied to iIcon are valid.
            Attempting to access other images in the system image list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.LinkOverlay">
            <summary>
            Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon.
            The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.Selected">
            <summary>
            Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color.
            The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.AttributeSpecified">
            <summary>
            Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific attributes that are desired.
            These attributes are passed to IShellFolder::GetAttributesOf.
            If this flag is not specified, 0xFFFFFFFF is passed to IShellFolder::GetAttributesOf, requesting all attributes.
            This flag cannot be specified with the SHGFI_ICON flag.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.LargeIcon">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's large icon.
            The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.SmallIcon">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's small icon.
            Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains small icon images.
            The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.OpenIcon">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's open icon.
            Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon.
            A container object displays an open icon to indicate that the container is open.
            The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.ShellIconSize">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. 
            If this flag is not specified the function sizes the icon according to the system metric values.
            The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.PointToItemIdList">
            <summary>
            Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.UseFileAttributes">
            <summary>
            Indicates that the function should not attempt to access the file specified by pszPath.
            Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes. 
            This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.AddOverlays">
            <summary>
            Apply the appropriate overlays to the file's icon.
            The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags.OverlayIndex">
            <summary>
            Return the index of the overlay icon.
            The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi.
            This flag requires that the SHGFI_ICON be set as well.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Icons.IconExtensions">
            <summary>
            Extension code for icons
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconExtensions.GetIcon``1(Dapplo.Windows.Desktop.IInteropWindow,System.Boolean)">
            <summary>
                Get the icon for a hWnd
            </summary>
            <typeparam name="TIcon">The return type for the icon, can be Icon, Bitmap or BitmapSource</typeparam>
            <param name="window">IInteropWindow</param>
            <param name="useLargeIcons">true to try to get a big icon first</param>
            <returns>TIcon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconExtensions.GetIconFromWindow``1(Dapplo.Windows.Desktop.IInteropWindow,System.Boolean)">
            <summary>
                Get the icon for an IInteropWindow
            </summary>
            <typeparam name="TIcon">The return type for the icon, can be Icon, Bitmap or BitmapSource</typeparam>
            <param name="window">IInteropWindow</param>
            <param name="useLargeIcons">true to try to get a big icon first</param>
            <returns>TIcon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconExtensions.GetIconForWindowHandle``1(System.IntPtr,System.Boolean)">
            <summary>
                Get the icon for a hWnd
            </summary>
            <typeparam name="TIcon">The return type for the icon, can be Icon, Bitmap or BitmapSource</typeparam>
            <param name="hWnd">IntPtr</param>
            <param name="useLargeIcons">true to try to get a big icon first</param>
            <returns>TIcon</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.IconHelper">
            <summary>
            Helper code for icons
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.GetAppLogo``1(Dapplo.Windows.Desktop.IInteropWindow,System.Int32)">
            <summary>
            Helper method to get the app logo from the applications AppxManifest
            </summary>
            <typeparam name="TBitmap">Type for the Bitmap, i.e. BitmapSource or Bitmap</typeparam>
            <param name="interopWindow">IInteropWindow</param>
            <param name="scale">int with scale, 100 is default</param>
            <returns>instance of TBitmap or null if nothing found</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.GetAppProcessPath(Dapplo.Windows.Desktop.IInteropWindow)">
            <summary>
            Get the path for the real modern app process belonging to the window
            </summary>
            <param name="interopWindow">IInteropWindow</param>
            <returns>string</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.WriteIcon(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Drawing.Image})">
            <summary>
                Write the images to the stream as icon.
                It's important that the images are not larger than 256x256.
            </summary>
            <param name="stream">Stream to write to</param>
            <param name="images">IEnumerable with images</param>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.ExtractVistaIcon(System.IO.Stream)">
            <summary>
                Based on <a href="http://www.codeproject.com/KB/cs/IconExtractor.aspx">Extract icons from EXE or DLL files</a>
                And a hint from <a href="http://www.codeproject.com/KB/cs/IconLib.aspx">IconLib - Icons Unfolded (MultiIcon and Windows Vista supported)</a>
            </summary>
            <param name="iconStream">Stream with the icon information</param>
            <returns>Bitmap with the Vista Icon (256x256)</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.ExtractAssociatedIcon``1(System.String,System.Int32,System.Boolean)">
            <summary>
                See: http://msdn.microsoft.com/en-us/library/windows/desktop/ms648069%28v=vs.85%29.aspx
            </summary>
            <typeparam name="TIcon"></typeparam>
            <param name="location">The file (EXE or DLL) to get the icon from</param>
            <param name="index">Index of the icon</param>
            <param name="useLargeIcon">true if the large icon is wanted</param>
            <returns>Icon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.CountAssociatedIcons(System.String)">
            <summary>
                Get the number of icon in the file
            </summary>
            <param name="location">Location of the EXE or DLL</param>
            <returns>int with the number of icons in the file</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.IconHandleTo``1(System.IntPtr)">
            <summary>
            Create a TIcon from the specified iconHandle
            </summary>
            <typeparam name="TIcon">Bitmap, Icon or BitmapSource</typeparam>
            <param name="iconHandle">IntPtr</param>
            <returns>TIcon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.IconHelper.GetSafeIconHandle(System.Drawing.Bitmap)">
            <summary>
                Get a SafeIconHandle so one can use using to automatically cleanup the HIcon
            </summary>
            <param name="bitmap">Bitmap</param>
            <returns>SafeIconHandle</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.NativeCursorMethods">
            <summary>
            Win32 native methods for Icon
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeCursorMethods.GetCursorInfo(Dapplo.Windows.User32.Structs.CursorInfo@)">
            <summary>
                See
                <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms648389(v=vs.85).aspx">GetCursorInfo function</a>
                Retrieves information about the global cursor.
            </summary>
            <param name="cursorInfo">CursorInfo structure to fill</param>
            <returns>bool</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.NativeIconMethods">
            <summary>
            Win32 native methods for Icon
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeIconMethods.ExtractIconEx(System.String,System.Int32,System.IntPtr@,System.IntPtr@,System.Int32)">
            <summary>
                Get the Icon from a file
            </summary>
            <param name="sFile">string</param>
            <param name="iIndex">int</param>
            <param name="piLargeVersion">IntPtr</param>
            <param name="piSmallVersion">IntPtr</param>
            <param name="amountIcons">int</param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeIconMethods.CopyIcon(System.IntPtr)">
            <summary>
                The following is used for Icon handling, and copies a hicon to a new
            </summary>
            <param name="hIcon">IntPtr</param>
            <returns>SafeIconHandle</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeIconMethods.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <remarks>It is only necessary to call DestroyIcon for icons and cursors created with the following functions: CreateIconFromResourceEx (if called without the LR_SHARED flag), CreateIconIndirect, and CopyIcon. Do not use this function to destroy a shared icon. A shared icon is valid as long as the module from which it was loaded remains in memory. The following functions obtain a shared icon.</remarks>
            <param name="hIcon">A handle to the icon to be destroyed. The icon must not be in use.</param>
            <returns>bool true if the destroy succeeded</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeIconMethods.GetIconInfo(Dapplo.Windows.Icons.SafeHandles.SafeIconHandle,Dapplo.Windows.Icons.Structs.IconInfo@)">
            <summary>
            Retrieves information about the specified icon or cursor.
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms648070(v=vs.85).aspx">GetIconInfo function</a>
            This also describes to get more info on standard icons and cursors
            </summary>
            <param name="iconHandle">A handle to the icon or cursor.</param>
            <param name="iconInfo">A pointer to an ICONINFO structure. The function fills in the structure's members.</param>
            <returns>bool true if the function succeeds, the return value is in the IconInfo structure.</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.NativeIconMethods.CreateIconIndirect(Dapplo.Windows.Icons.Structs.IconInfo@)">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms648062(v=vs.85).aspx">CreateIconIndirect function</a>
            </summary>
            <param name="icon">IconInfo</param>
            <returns>IntPtr with the icon handle</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.SafeHandles.SafeIconHandle">
            <summary>
                A SafeHandle class implementation for the hIcon
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.SafeHandles.SafeIconHandle.#ctor">
            <summary>
                Default constructor is needed to support marshalling!!
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.SafeHandles.SafeIconHandle.#ctor(System.Drawing.Bitmap)">
            <summary>
                Create a SafeIconHandle from a bitmap by calling GetHicon
            </summary>
            <param name="bitmap">Bitmap</param>
        </member>
        <member name="M:Dapplo.Windows.Icons.SafeHandles.SafeIconHandle.#ctor(System.IntPtr)">
            <summary>
                Create a SafeIconHandle from a hIcon
            </summary>
            <param name="hIcon">IntPtr to an icon</param>
        </member>
        <member name="M:Dapplo.Windows.Icons.SafeHandles.SafeIconHandle.ReleaseHandle">
            <summary>
                Call destroy icon
            </summary>
            <returns>true if this worked</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.Shell32">
            <summary>
                Description of Shell32.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Icons.Shell32.ExtractAssociatedIcon``1(System.String,System.Int32)">
            <summary>
                Returns an icon representation of an image contained in the specified file.
                This function is identical to System.Drawing.Icon.ExtractAssociatedIcon, xcept this version works.
                See: http://stackoverflow.com/questions/1842226/how-to-get-the-associated-icon-from-a-network-share-file
            </summary>
            <param name="filePath">The path to the file that contains an image.</param>
            <param name="iconIndex">Index of the icon</param>
            <returns>The System.Drawing.Icon representation of the image contained in the specified file.</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.Shell32.GetFileExtensionIcon``1(System.String,Dapplo.Windows.Icons.Enums.IconSize,System.Boolean)">
            <summary>
                Returns an icon for a given file extension - indicated by the name parameter.
                See: http://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx
            </summary>
            <param name="filename">Filename</param>
            <param name="size">Large or small</param>
            <param name="linkOverlay">Whether to include the link icon</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.Shell32.GetFolderIcon``1(Dapplo.Windows.Icons.Enums.IconSize,Dapplo.Windows.Icons.Enums.FolderType)">
            <summary>
                Used to access system folder icons.
            </summary>
            <param name="size">Specify large or small icons.</param>
            <param name="folderType">Specify open or closed FolderType.</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.Shell32.SHGetFileInfo(System.String,System.UInt32,Dapplo.Windows.Icons.Structs.ShellFileInfo@,System.UInt32,Dapplo.Windows.Icons.Enums.ShellGetFileInfoFlags)">
            <summary>
            
            </summary>
            <param name="pszPath">string</param>
            <param name="dwFileAttributes">uint</param>
            <param name="psfi">ref to ShellFileInfo</param>
            <param name="cbFileInfo">uint</param>
            <param name="uFlags">ShellGetFileInfoFlags</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.Icons.Shell32.ExtractAssociatedIcon(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32@)">
            <summary>
            Retrieves a handle to an indexed icon found in a file or an icon found in an associated executable file.
            </summary>
            <param name="hInst">A handle to the instance of the application calling the function.</param>
            <param name="iconPath">StringBuilder</param>
            <param name="iconIndex">The full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file. If the icon handle is obtained from an executable file, the function stores the full path and file name of that executable in the string pointed to by lpIconPath.</param>
            <returns>SafeIconHandle</returns>
        </member>
        <member name="T:Dapplo.Windows.Icons.Structs.IconInfo">
            <summary>
            See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms648052(v=vs.85).aspx">ICONINFO structure</a>
            Contains information about an icon or a cursor.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.IconInfo.IsIcon">
            <summary>
            Specifies whether this structure defines an icon or a cursor.
            A value of TRUE specifies an icon; FALSE specifies a cursor.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.IconInfo.Hotspot">
            <summary>
            The x and y coordinates of a cursor's hot spot.
            If this structure defines an icon, the hot spot is always in the center of the icon,
            and this member is ignored.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.IconInfo.BitmaskBitmapHandle">
            <summary>
            The icon bitmask bitmap.
            If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND bitmask and the lower half is the icon XOR bitmask.
            Under this condition, the height should be an even multiple of two.
            If this structure defines a color icon, this mask only defines the AND bitmask of the icon.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.IconInfo.ColorBitmapHandle">
            <summary>
            A handle to the icon color bitmap.
            This member can be optional if this structure defines a black and white icon.
            The AND bitmask of hbmMask is applied with the SRCAND flag to the destination;
            subsequently, the color bitmap is applied (using XOR) to the destination by using the SRCINVERT flag.
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Icons.Structs.ShellFileInfo">
            <summary>
            A structure which describes shell32 info on a file
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.ShellFileInfo.IconHandle">
            <summary>
            A handle to the icon that represents the file.
            You are responsible for destroying this handle with DestroyIcon when you no longer need it.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.ShellFileInfo.IconIndex">
            <summary>
            The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.ShellFileInfo.Attributes">
            <summary>
            An array of values that indicates the attributes of the file object.
            For information about these values, see the IShellFolder::GetAttributesOf method.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.ShellFileInfo.DisplayName">
            <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="P:Dapplo.Windows.Icons.Structs.ShellFileInfo.TypeName">
            <summary>
            A string that describes the type of file
            </summary>
        </member>
    </members>
</doc>
