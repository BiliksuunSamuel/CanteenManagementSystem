<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapplo.Windows.Com</name>
    </assembly>
    <members>
        <member name="T:Dapplo.Windows.Com.ComProgIdAttribute">
            <summary>
                An attribute to specifiy the ProgID of the COM class to create. (As suggested by Kristen Wegner)
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComProgIdAttribute.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="value">The COM ProgID.</param>
        </member>
        <member name="P:Dapplo.Windows.Com.ComProgIdAttribute.Value">
            <summary>
                Returns the COM ProgID
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComProgIdAttribute.GetAttribute(System.Type)">
            <summary>
                Extracts the attribute from the specified type.
            </summary>
            <param name="interfaceType">
                The interface type.
            </param>
            <returns>
                The <see cref="T:Dapplo.Windows.Com.ComProgIdAttribute" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="interfaceType" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Dapplo.Windows.Com.ComWrapper">
            <summary>
                Wraps a late-bound COM server.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper.RPC_E_CALL_REJECTED">
            <summary>
            This pretty much means that the COM message was rejected by the receiving application
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper.RPC_E_FAIL">
            <summary>
            This is a more hard error, but we are processing this like RPC_E_CALL_REJECTED
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.CanCastTo(System.Type,System.Object)">
            <summary>
                Implementation for the interface IRemotingTypeInfo
                This makes it possible to cast the COMWrapper
            </summary>
            <param name="toType">Type to cast to</param>
            <param name="o">object to cast</param>
            <returns></returns>
        </member>
        <member name="P:Dapplo.Windows.Com.ComWrapper.TypeName">
            <summary>
                Implementation for the interface IRemotingTypeInfo
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
                Intercept method calls
            </summary>
            <param name="myMessage">
                Contains information about the method being called
            </param>
            <returns>
                A <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" />.
            </returns>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper._comObject">
            <summary>
                Holds reference to the actual COM object which is wrapped by this proxy
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper._comType">
            <summary>
                Type of the COM object, set on constructor after getting the COM reference
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper._interceptType">
            <summary>
                The type of which method calls are intercepted and executed on the COM object.
            </summary>
        </member>
        <member name="F:Dapplo.Windows.Com.ComWrapper._targetName">
            <summary>
                The humanly readable target name
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.GetInstance``1">
            <summary>
                Gets a COM object and returns the transparent proxy which intercepts all calls to the object
            </summary>
            <typeparam name="T">Interface which defines the method and properties to intercept</typeparam>
            <returns>Transparent proxy to the real proxy for the object</returns>
            <remarks>T must be an interface decorated with the <see cref="T:Dapplo.Windows.Com.ComProgIdAttribute" />attribute.</remarks>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.CreateInstance``1">
            <summary>
                A simple create instance, doesn't create a wrapper!!
            </summary>
            <typeparam name="TCom">Type of the COM</typeparam>
            <returns>T</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.GetOrCreateInstance``1">
            <summary>
                Gets or creates a COM object and returns the transparent proxy which intercepts all calls to the object
                The ComProgId can be a normal ComProgId or a GUID prefixed with "clsid:"
            </summary>
            <typeparam name="T">Interface which defines the method and properties to intercept</typeparam>
            <returns>Transparent proxy to the real proxy for the object</returns>
            <remarks>T must be an interface decorated with the <see cref="T:Dapplo.Windows.Com.ComProgIdAttribute" />attribute.</remarks>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Wrap``1(System.Object)">
            <summary>
                Wrap a com object as COMWrapper
            </summary>
            <typeparam name="T">Interface which defines the method and properties to intercept</typeparam>
            <param name="comObject">An object to intercept</param>
            <returns>Transparent proxy to the real proxy for the object</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Wrap(System.Object,System.Type,System.String)">
            <summary>
                Wrap an object and return the transparent proxy which intercepts all calls to the object
            </summary>
            <param name="comObject">An object to intercept</param>
            <param name="type">Interface which defines the method and properties to intercept</param>
            <param name="targetName"></param>
            <returns>Transparent proxy to the real proxy for the object</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.#ctor(System.Object,System.Type,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="comObject">
                The COM object to wrap.
            </param>
            <param name="type">
                The interface type to impersonate.
            </param>
            <param name="targetName"></param>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Finalize">
            <summary>
                If <see cref="M:Dapplo.Windows.Com.ComWrapper.Dispose" /> is not called, we need to make
                sure that the COM object is still cleaned up.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Dispose">
            <summary>
                Cleans up the COM object.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Dispose(System.Boolean)">
            <summary>
                Release the COM reference
            </summary>
            <param name="disposing">
                <see langword="true" /> if this was called from the
                <see cref="T:System.IDisposable" /> interface.
            </param>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.ToString">
            <summary>
                Returns a string representing the wrapped object.
            </summary>
            <returns>
                The full name of the intercepted type.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.GetHashCode">
            <summary>
                Returns the hash code of the wrapped object.
            </summary>
            <returns>
                The hash code of the wrapped object.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.Equals(System.Object)">
            <summary>
                Compares this object to another.
            </summary>
            <param name="obj">The value to compare to.</param>
            <returns><see langword="true" /> if the objects are equal.</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.ComWrapper.GetByValType(System.Type)">
            <summary>
                Returns the base type for a reference type.
            </summary>
            <param name="byRefType">
                The reference type.
            </param>
            <returns>
                The base value type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="byRefType" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Dapplo.Windows.Com.DisposableCom">
            <summary>
                A factory for IDisposableCom
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.DisposableCom.Create``1(``0)">
            <summary>
                Create a ComDisposable for the supplied type object
            </summary>
            <typeparam name="T">Type for the com object</typeparam>
            <param name="comObject">the com object itself</param>
            <returns>IDisposableCom of type T</returns>
        </member>
        <member name="T:Dapplo.Windows.Com.DisposableComImplementation`1">
            <summary>
                Implementation of the IDisposableCom, this is internal to prevent other code to use it directly
            </summary>
            <typeparam name="T">Type of the com object</typeparam>
        </member>
        <member name="M:Dapplo.Windows.Com.DisposableComImplementation`1.Dispose">
            <summary>
                Cleans up the COM object.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.DisposableComImplementation`1.Dispose(System.Boolean)">
            <summary>
                Release the COM reference
            </summary>
            <param name="disposing"><see langword="true" /> if this was called from the<see cref="T:System.IDisposable" /> interface.</param>
        </member>
        <member name="T:Dapplo.Windows.Com.IDispatch">
            <summary>
            Exposes objects, methods and properties to programming tools and other applications that support Automation. COM components implement the IDispatch interface to enable access by Automation clients, such as Visual Basic.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.IDispatch.GetTypeInfoCount(System.Int32@)">
            <summary>
            Retrieves the number of type information interfaces that an object provides (either 0 or 1).
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IDispatch.GetTypeInfo(System.Int32,System.Int32,System.Type@)">
            <summary>
            Retrieves the type information for an object, which can then be used to get the type information for an interface.
            </summary>
            <param name="iTInfo"></param>
            <param name="lcid"></param>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IDispatch.GetIDsOfNames(System.Guid@,System.String[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to Invoke.
            </summary>
            <param name="riid"></param>
            <param name="rgsNames"></param>
            <param name="cNames"></param>
            <param name="lcid"></param>
            <param name="rgDispId"></param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IDispatch.Invoke(System.Int32,System.Guid@,System.UInt32,System.UInt16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.Object@,System.Runtime.InteropServices.ComTypes.EXCEPINFO@,System.IntPtr[])">
            <summary>
            Provides access to properties and methods exposed by an object.
            </summary>
            <param name="dispIdMember"></param>
            <param name="riid"></param>
            <param name="lcid"></param>
            <param name="wFlags"></param>
            <param name="pDispParams"></param>
            <param name="pVarResult"></param>
            <param name="pExcepInfo"></param>
            <param name="pArgErr"></param>
            <returns></returns>
        </member>
        <member name="T:Dapplo.Windows.Com.IDisposableCom`1">
            <summary>
                A simple com wrapper which helps with "using"
            </summary>
            <typeparam name="T">Type to wrap</typeparam>
        </member>
        <member name="P:Dapplo.Windows.Com.IDisposableCom`1.ComObject">
            <summary>
                The actual com object
            </summary>
        </member>
        <member name="T:Dapplo.Windows.Com.IOleCommandTarget">
            <summary>
            Enables objects and their containers to dispatch commands to each other. For example, an object's toolbars may contain buttons for commands such as Print, Print Preview, Save, New, and Zoom.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683797(v=vs.85).aspx">IOleCommandTarget interface</a>
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.IOleCommandTarget.QueryStatus(System.Guid,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Queries the object for the status of one or more commands generated by user interface events.
            </summary>
            <param name="pguidCmdGroup">The unique identifier of the command group; can be NULL to specify the standard group.</param>
            <param name="cCmds">The number of commands in the prgCmds array.</param>
            <param name="prgCmds">A caller-allocated array of OLECMD structures that indicate the commands for which the caller needs status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration.</param>
            <param name="pCmdText">A pointer to an OLECMDTEXT structure in which to return name and/or status information of a single command. This parameter can be NULL to indicate that the caller does not need this information.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            E_FAIL
            The operation failed.
            
            E_UNEXPECTED
            An unexpected error has occurred.
            
            E_POINTER
            The prgCmds argument is NULL.
            
            OLECMDERR_E_UNKNOWNGROUP
            The pguidCmdGroup parameter is not NULL but does not specify a recognized command group.
            </returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IOleCommandTarget.Exec(System.Guid,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Executes the specified command or displays help for the command.
            </summary>
            <param name="pguidCmdGroup">The unique identifier of the command group; can be NULL to specify the standard group.</param>
            <param name="nCmdId">The command to be executed. This command must belong to the group specified with pguidCmdGroup.</param>
            <param name="nCmdexecopt">Specifies how the object should execute the command. Possible values are taken from the OLECMDEXECOPT and OLECMDID_WINDOWSTATE_FLAG enumerations.</param>
            <param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. This parameter can be NULL.</param>
            <param name="pvaOut">Pointer to a VARIANTARG structure to receive command output. This parameter can be NULL.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            OLECMDERR_E_UNKNOWNGROUP
            The pguidCmdGroup parameter is not NULL but does not specify a recognized command group.
            OLECMDERR_E_NOTSUPPORTED
            The nCmdID parameter is not a valid command in the group identified by pguidCmdGroup.
            OLECMDERR_E_DISABLED
            The command identified by nCmdID is currently disabled and cannot be executed.
            OLECMDERR_E_NOHELP
            The caller has asked for help on the command identified by nCmdID, but no help is available.
            OLECMDERR_E_CANCELED
            The user canceled the execution of the command.
            </returns>
        </member>
        <member name="T:Dapplo.Windows.Com.IOleWindow">
            <summary>
            The IOleWindow interface provides methods that allow an application to obtain the handle to the various windows that participate in in-place activation, and also to enter and exit context-sensitive help mode.
            See <a href="http://msdn.microsoft.com/en-us/library/ms680102%28v=vs.85%29.aspx">IOleWindow interface</a>
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.IOleWindow.GetWindow(System.IntPtr@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window)
            </summary>
            <param name="phWnd">A pointer to a variable that receives the window handle.</param>
        </member>
        <member name="M:Dapplo.Windows.Com.IOleWindow.ContextSensitiveHelp(System.Boolean)">
            <summary>
            Determines whether context-sensitive help mode should be entered during an in-place activation session.
            </summary>
            <param name="fEnterMode">TRUE if help mode should be entered; FALSE if it should be exited.</param>
        </member>
        <member name="T:Dapplo.Windows.Com.IUnknown">
            <summary>
            Enables clients to get pointers to other interfaces on a given object through the QueryInterface method, and manage the existence of the object through the AddRef and Release methods. All other COM interfaces are inherited, directly or indirectly, from IUnknown. Therefore, the three methods in IUnknown are the first entries in the VTable for every interface.
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.IUnknown.QueryInterface(System.Guid@)">
            <summary>
            Retrieves pointers to the supported interfaces on an object.
            </summary>
            <param name="riid"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IUnknown.AddRef">
            <summary>
            Increments the reference count for an interface on an object.
            </summary>
            <returns>uint</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.IUnknown.Release">
            <summary>
            Decrements the reference count for an interface on an object.
            </summary>
            <returns>uint</returns>
        </member>
        <member name="T:Dapplo.Windows.Com.Ole32Api">
            <summary>
            This provides an API for OLE32
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.Ole32Api.ClassIdFromProgId(System.String)">
            <summary>
            This converts a ProgID (program ID) into a Guid with the clsId
            </summary>
            <param name="programId">string with the program ID</param>
            <returns>Guid with the clsId</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.Ole32Api.ProgIdFromClassId(System.Guid)">
            <summary>
            This converts a clsid (Class ID) into a ProgID (program ID)
            </summary>
            <param name="clsId">Guid with the clsid (Class ID)</param>
            <returns>string with the progid</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.Ole32Api.CLSIDFromProgID(System.String,System.Guid@)">
            <summary>
            See more <a href="https://docs.microsoft.com/en-us/windows/desktop/api/combaseapi/nf-combaseapi-clsidfromprogid">here</a>
            </summary>
            <param name="progId">string with the progId</param>
            <param name="clsId">Guid</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.Ole32Api.ProgIDFromCLSID(System.Guid@,System.String@)">
            <summary>
            See more <a href="https://docs.microsoft.com/en-us/windows/desktop/api/combaseapi/nf-combaseapi-progidfromclsid">here</a>
            </summary>
            <param name="clsId">Guid The CLSID for which the ProgID is to be requested.</param>
            <param name="lplpszProgId">string the ProgID string. The string that represents clsid includes enclosing braces.</param>
            <returns>HResult</returns>
        </member>
        <member name="T:Dapplo.Windows.Com.OleAut32Api">
            <summary>
            API for OLEAUT32
            </summary>
        </member>
        <member name="M:Dapplo.Windows.Com.OleAut32Api.GetActiveObject``1(System.Guid@)">
            <summary>
            Get the active instance of the com object with the specified GUID
            </summary>
            <typeparam name="T">Type for the instance</typeparam>
            <param name="clsId">Guid</param>
            <returns>IDisposableCom of T</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.OleAut32Api.GetActiveObject``1(System.String)">
            <summary>
            Get the active instance of the com object with the specified progId
            </summary>
            <typeparam name="T">Type for the instance</typeparam>
            <param name="progId">string</param>
            <returns>IDisposableCom of T</returns>
        </member>
        <member name="M:Dapplo.Windows.Com.OleAut32Api.GetActiveObject(System.Guid@,System.IntPtr,System.Object@)">
            <summary>
            For more details read <a href="https://docs.microsoft.com/en-gb/windows/desktop/api/oleauto/nf-oleauto-getactiveobject">this</a>
            </summary>
            <param name="rclsId">The class identifier (CLSID) of the active object from the OLE registration database.</param>
            <param name="pvReserved">Reserved for future use. Must be null.</param>
            <param name="ppunk">The requested active object.</param>
            <returns></returns>
        </member>
    </members>
</doc>
